include('auto');

function playBestMove(bestMove){
	debug("danger: "+ bestMove[_danger]);
	debug("SafeScor: "+ bestMove[_sScore]);
	debug("mpused: "+ bestMove[_mpused]);
	debug("tpleft: "+ bestMove[_tpleft]);
	debug("kill: "+ bestMove[_dead]);
	debug("totalscore: "+ bestMove[_score]);
	if(bestMove[_danger]>=getLife()*_RATIO_RISK_DEATH
	|| bestMove[_danger] > 300) _STATE_LEEK_MIGHT_DIE = true;
	/*
	
	_scores:scores,
								*/
	
	var delayedSummon = [], i=0;
	for(var actionBin in bestMove[_actions]){
		var action = getActionFromBin(actionBin);
		var item = action[_item], from = action[_from], to = action[_to];
		debug("Using " + getItemName(item) + " | " + bestMove[_scores][i++]);
		if(from == _action_SELFCELL){
			from = getCell();
			to = getCell();
		}
		moveTowardCell(from);
		if(isSpecialChip(item)){ // GESTION SUMMON
			push(delayedSummon, item);
		}else if(_ITEM_ISWEAP[item]){
			if(count(getWeaponTargets(item, to))>0){
				if(getWeapon()!=item) setWeapon(item);
				useWeaponOnCell(to);
			}else {
				debug("No more targets :(");
				mark(to, COLOR_RED);
			}
		}
		else if(count(getChipTargets(item, to))>0) useChipOnCell(item, to);
		else debug("No more targets :(");
		
		// on compte les utilisations :
		if(!isSummon(getLeek())){
			countUsage(item);
		}
	}
	if(bestMove[_sCell]!=null){
		moveTowardCell(bestMove[_sCell]);
	}
	for(var item in delayedSummon){
		if(item == CHIP_RESURRECTION){
			var cell = findSafestCellToRez(_RESU_TARGET, getCell());
			resurrect(_RESU_TARGET, cell);
		}else{
			var bCell, isOff= (item != CHIP_METALLIC_BULB && item != CHIP_HEALER_BULB);
			var eCell = getCell(getNearestEnemy());
			if(isOff) 	bCell = getClosestCells(eCell, getCellsToUseChip(item, _SELF));
			else 		bCell = getFarestCells(eCell, getCellsToUseChip(item, _SELF));
			summon(item, bCell, ia_bulb_main);
		}
	}
	// appel à la fonction failSafe défini dans le main, qui utilise les items dispos dans la limite des tps restant dispo
	failSafe();
	// ça permet de summon un bulbe si j'ai rien fait dans mon tour par manque d'opé au tour 1 d'un BR par exemple
	var _MAINWEAPON = getMainWeapon();
	if(_SHOULD_KEEP_MAINWEAP_INHAND && getWeapon()!= _MAINWEAPON) setWeapon(_MAINWEAPON);
	else if(_MAINWEAPON != null && getWeapon()==null) setWeapon(_MAINWEAPON);
}

function getFarestCells(@from, @cells){
	var dist=0, best;
	for(var c in cells){
		var d = getCellDistance(c, from);
		if(best==null||d>dist){
			best=c;
			d=dist;
		}
	}
	return @best;
}
function getClosestCells(@from, @cells){
	var dist=_MAX_INT, best;
	for(var c in cells){
		var d = getCellDistance(c, from);
		if(best==null||d<dist){
			best=c;
			d=dist;
		}
	}
	return @best;
}

function getItemDamage(@item, @e, @inv){
	if(item==WEAPON_KATANA) 
		return 77*(1+getStrength()/100)*(1-getRelativeShield(e)/100)-getAbsoluteShield(e);
	else if(item==WEAPON_AXE)
		return 50*(1+getStrength()/100)*(1-getRelativeShield(e)/100)-getAbsoluteShield(e);
	else if(item==CHIP_DEVIL_STRIKE)
		return (25*0.83*(1+getStrength()/100)*(1-getRelativeShield(e)/100)-getAbsoluteShield(e))*5;
	else if(item==CHIP_LIGHTNING)
		return 35*(1+getStrength()/100)*(1-getRelativeShield(e)/100)-getAbsoluteShield(e);
	else if(item==CHIP_METEORITE)
		return 70*(1+getStrength()/100)*(1-getRelativeShield(e)/100)-getAbsoluteShield(e);
	else if(item==WEAPON_ELECTRISOR)
		return 70*(1+getStrength()/100)*(1-getRelativeShield(e)/100)-getAbsoluteShield(e);
	else if(item==CHIP_STALACTITE)
		return 64*(1+getStrength()/100)*(1-getRelativeShield(e)/100)-getAbsoluteShield(e);
	else if(item==WEAPON_M_LASER)
		return 90*(1+getStrength()/100)*(1-(getRelativeShield(e)-(inv?20:0))/100)-getAbsoluteShield(e);
	else if(item==WEAPON_FLAME_THROWER)
		return 24*(1+getMagic()/100)+35*(1+getStrength()/100)*(1-getRelativeShield(e)/100)-getAbsoluteShield(e);
	else if(item==WEAPON_GAZOR)
		return 28*(1+getMagic()/100);
	else if(item==CHIP_PLAGUE)
		return 40*(1+getMagic()/100);
	else if(item==CHIP_TOXIN)
		return 26*(1+getMagic()/100);
}

function tryKillWithCombo(@combo, @e){
	for(var item in combo) if(_ENCODING_STUFF[item]==null) return false;
	var dmg=0, needSwap=0, tpCost=0, inHand = getWeapon(),
		maxCost=getTP(), inver=false, strDbg = "";
	for(var item in combo){
		if(_ITEM_ISWEAP[item] && item != inHand) needSwap = 1;
		else if(!_ITEM_ISWEAP[item] && getCooldown(item)!=0) return false;
		else if(item==CHIP_DEVIL_STRIKE && (getLife()<1000||getAbsoluteShield()<75))
			return false;
		if(item==WEAPON_M_LASER && getCooldown(CHIP_INVERSION)==0)
			if(maxCost>=21 || (maxCost>=20 && inHand==WEAPON_M_LASER))
				inver=true;
		tpCost += _ITEM_COST[item];
		dmg+= getItemDamage(item, e, inver);
		strDbg+= getItemName(item)+":"+_ITEM_COST[item];
	} 
	tpCost += needSwap;
	strDbg+="|swap:"+needSwap+"_cost:"+tpCost+'_maxc:'+maxCost;
	debugE(strDbg);
	if(tpCost<=maxCost && (dmg>=_LEEKS[e][_life] || dmg>=_LEEKS[e][_psnlife])){
		var cellFrom = getCellToUseWeapon(combo[0], e);
		if(reachableCells[cellFrom]!=null){
			moveTowardCell(cellFrom);
			for(var item in combo){
				if(isAlive(e)){
					if(inver&&getCooldown(CHIP_INVERSION)==0) useChip(CHIP_INVERSION, e);
					if(_ITEM_ISWEAP[item] && getWeapon()!=item) setWeapon(item);
					if(_ITEM_ISWEAP[item]) useWeapon(e);
					else if(item==CHIP_DEVIL_STRIKE){
						if(getTP()>=7) say(rand()>0.7?"Allah akbar !":"BOUMCHAKA");
						useChip(item, getLeek());
					}else useChip(item, e);
				}
			}
			refreshLeeksCellsAndAliveStatus();
			refreshLeeksEffectsAndStates();
			reachableCells = getReachableCells([getCell():0], getMP(), []);
			return true;
		}
	}
	return false;
}

function tryTeleKillWithCombo(@combo, @e){
	for(var item in combo) if(_ENCODING_STUFF[item]==null) return false;
	var dmg=0, needSwap=0, tpCost=0, inHand = getWeapon(),
		maxCost=getTP()-_ITEM_COST[CHIP_TELEPORTATION], strDbg = "";
	for(var item in combo){
		if(_ITEM_ISWEAP[item] && item != inHand) needSwap = 1;
		else if(!_ITEM_ISWEAP[item] && getCooldown(item)!=0) return false;
		else if(item==CHIP_DEVIL_STRIKE && (getLife()<1000||getAbsoluteShield()<75))
			return false;
		tpCost += _ITEM_COST[item];
		dmg+= getItemDamage(item, e, false);
		strDbg+= getItemName(item)+":"+_ITEM_COST[item];
	} 
	tpCost += needSwap;
	strDbg+="|swap:"+needSwap+"_cost:"+tpCost+'_maxc:'+maxCost;
	debugE(strDbg);
	if(tpCost<=maxCost && (dmg>=_LEEKS[e][_life] || dmg>=_LEEKS[e][_psnlife])){
		var cellFrom = getCellToUseWeapon(combo[0], e);
		if(reachableCells[cellFrom]==null){
			var cellFromT = getCellToUseChipOnCell(CHIP_TELEPORTATION, cellFrom);
			var dist = reachableCells[cellFromT];
			if(dist!=null){
				moveTowardCell(cellFromT);
				useChipOnCell(CHIP_TELEPORTATION, cellFrom);
				countUsage(CHIP_TELEPORTATION);
				for(var item in combo){
					if(isAlive(e)){
						if(_ITEM_ISWEAP[item] && getWeapon()!=item) setWeapon(item);
						if(_ITEM_ISWEAP[item]) useWeapon(e);
						else if(item==CHIP_DEVIL_STRIKE){
							if(getTP()>=7) say("Allah akbar !");
							useChip(item, getLeek());
						}else useChip(item, e);
					}
				}
				refreshLeeksCellsAndAliveStatus();
				refreshLeeksEffectsAndStates();
				reachableCells = getReachableCells([getCell():0], getMP(), []);
				return true;
			}
		}
	}
	return false;
}
