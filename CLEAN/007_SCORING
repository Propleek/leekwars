include('auto');
// TODO one day : http://www.mathe-fa.de/fr#result
//debut de chaque tour après avoir init la map de danger
function updateCoef(idbulb){
	_STATE_LEEK_MIGHT_DIE = false;
	var somme_life_ally = 0;
	var somme_life_enemy= 0;
	var count_ally = 0;
	var count_enemy= 0;
	var targets = _ALIVE_ALLIES+_ALIVE_ENEMIES;

	if(idbulb!=null) targets = [idbulb];
	else{
		_COEF_DMG = [];
		_COEF_HEAL = [];
		_COEF_VACCIN = [];
		_COEF_MAXHP_BOOST = [];
		_COEF_ABSSHIELD = [];
		_COEF_RELSHIELD = [];
		_COEF_STR_BOOST = [];
		_COEF_MP_BOOST = [];
		_COEF_TP_BOOST = [];	
		_COEF_AGI_BOOST = [];
		_COEF_WSD_BOOST = [];
		_COEF_RST_BOOST = [];
		_COEF_SHACKLE_TP = [];
		_COEF_SHACKLE_MP = [];
		_COEF_SHACKLE_STR = [];
		_COEF_SHACKLE_MGC = [];
		_COEF_LIBERATE = [];
		_COEF_RETURN_DMG = [];
	}
	for(var target in targets){
		if(__DDD_ON && getFightContext()==FIGHT_CONTEXT_CHALLENGE){
			_COEF_DMG[target]= randInt(-10, 11);
			_COEF_HEAL[target]= randInt(-10, 11);
			_COEF_VACCIN[target]= randInt(-10, 11);
			_COEF_MAXHP_BOOST[target]= randInt(-10, 11);
			_COEF_ABSSHIELD[target]= randInt(-10, 11);
			_COEF_RELSHIELD[target]= randInt(-10, 11);
			_COEF_STR_BOOST[target]= randInt(-10, 11);
			_COEF_MP_BOOST[target]= randInt(-10, 11);
			_COEF_TP_BOOST[target]= randInt(-10, 11);
			_COEF_AGI_BOOST[target]= randInt(-10, 11);
			_COEF_WSD_BOOST[target]= randInt(-10, 11);
			_COEF_RST_BOOST[target]= randInt(-10, 11);
			_COEF_SHACKLE_TP[target]= randInt(-10, 11);
			_COEF_SHACKLE_MP[target]= randInt(-10, 11);
			_COEF_SHACKLE_STR[target]= randInt(-10, 11);
			_COEF_SHACKLE_MGC[target]= randInt(-10, 11);
			_COEF_LIBERATE[target]= randInt(-10, 11);
			_COEF_RETURN_DMG[target]= randInt(-10, 11);
			continue;
		}
		var infos = _LEEKS[target];
		var eType = getEntityType(target);
		var lifeRatio = getLife(target)/getTotalLife(target);
		if(isAlly(target)){
			if(eType==ENTITY_LEEK_){
				var ignoreleeks=getListOfEnemyLeekWhoPlayAfter(target);
				var danger = getCellDanger(getCell(target), ignoreleeks, [])[_danger];
				var canDie = (target != _SELF) && getLife(target) < danger*0.9;
				if(canDie) debugE("canDie: " + getName(target) + ":" + danger);
				_STATE_LEEK_MIGHT_DIE = true;
				somme_life_ally+=infos[_life]; // SUM LIFE ALLY
				count_ally++; // COUNT ALLY LEEK
				_COEF_HEAL[target] = -10;
				if(lifeRatio<0.9) _COEF_HEAL[target]+= -8;
				if(lifeRatio<0.8) _COEF_HEAL[target]+= -8;
				if(lifeRatio<0.7) _COEF_HEAL[target]+= -8;
				if(target==_SELF&&lifeRatio<0.6) _COEF_HEAL[target]+= -16;
				if(canDie) _COEF_HEAL[target]=-80; // !!!!!!!!!!!!!!!!!!
				else if(target==_SELF)_COEF_HEAL[target]+= -0.5;
				if(getLevel(target)<getLevel()/2) _COEF_HEAL[target]/=2;
				// reminder: doit être positif sinon les moins s'annulent !
				_COEF_DMG[target] = _COEF_HEAL[target];
				if(target==_SELF) _COEF_DMG[target]*=2;
				_COEF_VACCIN[target] = -3;
				if(lifeRatio<0.95 && !canDie) _COEF_VACCIN[target]+= -5;
				if(getLevel(target)<getLevel()/2) _COEF_VACCIN[target]/=2;
				_COEF_MAXHP_BOOST[target] = -10;
				if(getTotalLife(target)<=2200)_COEF_MAXHP_BOOST[target]+= -5;
				if(getTotalLife(target)<=2000)_COEF_MAXHP_BOOST[target]+= -5;
				if(getTotalLife(target)<=1800)_COEF_MAXHP_BOOST[target]+= -5;
				if(getTotalLife(target)<=1600)_COEF_MAXHP_BOOST[target]+= -5;
				if(getTotalLife(target)<=1200)_COEF_MAXHP_BOOST[target]+= -5;
				if(getTotalLife(target)<=800)_COEF_MAXHP_BOOST[target]+= -5;
				if(target==_SELF && _IS_CAC)_COEF_MAXHP_BOOST[target]+= -5;
				_COEF_ABSSHIELD[target] = -1.5;
				if(infos[_absShield]==0) _COEF_ABSSHIELD[target]+= -4;
				if(lifeRatio<0.9)_COEF_ABSSHIELD[target]+= -0.2;
				if(lifeRatio<0.8)_COEF_ABSSHIELD[target]+= -0.2;
				if(lifeRatio<0.7)_COEF_ABSSHIELD[target]+= -0.2;
				if(lifeRatio<0.6)_COEF_ABSSHIELD[target]+= -0.2;
				if(lifeRatio<0.5)_COEF_ABSSHIELD[target]+= -0.2;
				if(lifeRatio<0.4)_COEF_ABSSHIELD[target]+= -0.2;
				if(lifeRatio<0.3)_COEF_ABSSHIELD[target]+= -0.2;
				if(lifeRatio<0.2)_COEF_ABSSHIELD[target]+= -0.2;
				if(canDie) _COEF_ABSSHIELD[target]=-75; // !!!!!!!!!!!!!!!!!!
				else if(target==_SELF && _IS_CAC)_COEF_ABSSHIELD[target]+= -0.5;
				else if(getScience(target)>500)_COEF_ABSSHIELD[target]+= -1;
				_COEF_RELSHIELD[target] = -1.5;
				if(infos[_relShield]==0) _COEF_RELSHIELD[target] += -4;
				if(_SNC_400) _COEF_RELSHIELD[target] += -4;
				if(lifeRatio<0.9)_COEF_RELSHIELD[target]+= -0.2;
				if(lifeRatio<0.8)_COEF_RELSHIELD[target]+= -0.2;
				if(lifeRatio<0.7)_COEF_RELSHIELD[target]+= -0.2;
				if(lifeRatio<0.6)_COEF_RELSHIELD[target]+= -0.2;
				if(lifeRatio<0.5)_COEF_RELSHIELD[target]+= -0.2;
				if(lifeRatio<0.4)_COEF_RELSHIELD[target]+= -0.2;
				if(lifeRatio<0.3)_COEF_RELSHIELD[target]+= -0.2;
				if(lifeRatio<0.2)_COEF_RELSHIELD[target]+= -0.2;
				if(canDie) _COEF_RELSHIELD[target]=-75; // !!!!!!!!!!!!!!!!!!
				else if(target==_SELF && _IS_CAC)_COEF_RELSHIELD[target]+= -0.5;
				else if(getScience(target)>500)_COEF_RELSHIELD[target]+= -1;
				_COEF_STR_BOOST[target] = -1;
				if(getStrength(target)>0) _COEF_STR_BOOST[target] += -5;
				if(getStrength(target)>=200) _COEF_STR_BOOST[target] += -8;
				if(getStrength(target)>=400) _COEF_STR_BOOST[target] += -8;
				if(getStrength(target)>750) _COEF_STR_BOOST[target] += 6;
				if(getStrength(target)>1000) _COEF_STR_BOOST[target] += 10;
				if(target!=_SELF && getStrength(target)>0) _COEF_STR_BOOST[target] += -0.5;
				_COEF_MP_BOOST[target] = -2;
				if(getMP(target)<9) _COEF_MP_BOOST[target]+= -0.5;
				if(infos[_str]>600) _COEF_MP_BOOST[target] += -1;
				if(target==_SELF&&count(_ALIVE_ALLIES_LEEKS)>1) _COEF_MP_BOOST[target]+= 1;
				_COEF_TP_BOOST[target] = -2;
				if(infos[_str]>600) _COEF_TP_BOOST[target] += -1;
				_COEF_AGI_BOOST[target] = -2-(getAgility(target)/200);
				_COEF_WSD_BOOST[target] = -2;
				_COEF_RST_BOOST[target] = -(getResistance(target)/67);
				if(getResistance(target)<400 && _COEF_RST_BOOST[target]!=0)
					_COEF_RST_BOOST[target] += -2;
				_COEF_SHACKLE_TP[target] = -2;
				_COEF_SHACKLE_MP[target] = -2;
				_COEF_SHACKLE_STR[target] = -2;
				_COEF_SHACKLE_MGC[target] = -2;
				_COEF_LIBERATE[target] = -2;
				if(_STR_300 || _SNC_400) _COEF_RETURN_DMG[target] = -4;
				else _COEF_RETURN_DMG[target] = -0.1;
			}
			else {//bulb
				var ignoreleeks=[];
				if(getSummoner(target)!=_SELF && target!=_SELF){
					ignoreleeks = getListOfEnemyLeekWhoPlayAfter(target);
				}
				var danger = getCellDanger(getCell(target), ignoreleeks, [])[_danger];
				var canDie = getSummoner(target)!=_SELF && target!=_SELF && getLife(target) < danger*0.9;
				if(canDie) debugE("canDie: " + getName(target) + ":" + danger);
				count_ally+=0.5;
				somme_life_ally+=infos[_life]*0.2; // ???
				_COEF_HEAL[target] = -5;
				if(lifeRatio<0.8) _COEF_HEAL[target]+= -2;
				if(lifeRatio<0.6) _COEF_HEAL[target]+= -2;
				if(lifeRatio<0.4) _COEF_HEAL[target]+= -2;
				if(canDie) _COEF_HEAL[target]+=-5;
				if(infos[_psnlife] < infos[_life] && lifeRatio < 0.7 && infos[_psnlife] > -200)  _COEF_HEAL[target]+= -4;
				if(infos[_totallife] < 600) _COEF_HEAL[target]+= 2;
				_COEF_DMG[target] = _COEF_HEAL[target];
				if(lifeRatio==1) _COEF_VACCIN[target]=0;
				else{
					_COEF_VACCIN[target] = -1;
					if(lifeRatio<0.9 && lifeRatio>0.5) _COEF_VACCIN[target]+= -1;
				}
				_COEF_MAXHP_BOOST[target] = -10;
				if(eType==ENTITY_HEALER_BULB){
					_COEF_HEAL[target]*=3;
					_COEF_VACCIN[target]*=1.5;
					_COEF_MAXHP_BOOST[target] += -12;
				}
				
				if(getTotalLife(target)>600) _COEF_MAXHP_BOOST[target] += 1;
				if(getTotalLife(target)>800) _COEF_MAXHP_BOOST[target] += 1;
				if(getTotalLife(target)>1000) _COEF_MAXHP_BOOST[target] += 1;
				if(getTotalLife(target)>1200) _COEF_MAXHP_BOOST[target] += 1;
				if(getTotalLife(target)>1600) _COEF_MAXHP_BOOST[target] += 1;
				if(getTotalLife(target)>2000) _COEF_MAXHP_BOOST[target] += 1;
				if(getTotalLife(target)>2400) _COEF_MAXHP_BOOST[target] += 1;
				if(eType==ENTITY_METALLIC_BULB && getTotalLife(target)>1500) _COEF_MAXHP_BOOST[target] += 0.5;
				_COEF_ABSSHIELD[target] = 0;// -1.2;
				//if(eType==ENTITY_METALLIC_BULB) _COEF_ABSSHIELD[target] = -0.1;
				_COEF_RELSHIELD[target] = 0;// -1.2;
				//if(eType==ENTITY_METALLIC_BULB) _COEF_RELSHIELD[target] = -0.1;
				_COEF_STR_BOOST[target] = -1.9;
				if(eType==ENTITY_HEALER_BULB) _COEF_STR_BOOST[target] = 0;
				if(eType==ENTITY_METALLIC_BULB) _COEF_STR_BOOST[target] = 0;
				if(infos[_psnlife] <= 0) _COEF_STR_BOOST[target]/=2;
				_COEF_MP_BOOST[target] = -1;
				if(getStrength(target)>=300) _COEF_MP_BOOST[target]+= -2;
				if(getStrength(target)>=600) _COEF_MP_BOOST[target]+= -2;
				if(infos[_psnlife] <= 0) _COEF_MP_BOOST[target]/=2;
				_COEF_TP_BOOST[target] = -1;
				if(round(rand()))_COEF_TP_BOOST[target] += -0.1;
				if(getStrength(target)>=300) _COEF_TP_BOOST[target]+= -2;
				if(getStrength(target)>=600) _COEF_TP_BOOST[target]+= -2;
				if(infos[_psnlife] <= 0) _COEF_TP_BOOST[target]/=2;
				_COEF_AGI_BOOST[target] = -1;
				_COEF_WSD_BOOST[target] = -1;
				_COEF_RST_BOOST[target] = -(getResistance(target)/200);
				_COEF_SHACKLE_TP[target] = -1;
				_COEF_SHACKLE_MP[target] = -1;
				_COEF_SHACKLE_STR[target] = -1;
				_COEF_SHACKLE_MGC[target] = -1;
				_COEF_LIBERATE[target] = -0.1;
				if(_STR_300 || _SNC_400) _COEF_RETURN_DMG[target] = -2;
				else _COEF_RETURN_DMG[target] = -0;
			}
		}else{//enemy
			_COEF_VACCIN[target] = 2;
			_COEF_MAXHP_BOOST[target] = 2;
			_COEF_ABSSHIELD[target] = 2;
			_COEF_RELSHIELD[target] = 2;
			_COEF_STR_BOOST[target] = 2;
			_COEF_MP_BOOST[target] = 2;
			_COEF_TP_BOOST[target] = 2;
			_COEF_AGI_BOOST[target] = 2;
			_COEF_WSD_BOOST[target] = 2;
			_COEF_RST_BOOST[target] = 2;
			_COEF_RETURN_DMG[target] = 2;
			if(eType==ENTITY_LEEK_){
				somme_life_enemy+=infos[_life]; // SUM LIFE ENEMY
				count_enemy++; // COUNT ENEMY LEEK
				// ADD JACE BR
				var arrayAntiBR = ["Jace", "Artorias", "Alpacah", "gelbaz", "Eautaku"];
				if(getFightType()==FIGHT_TYPE_BATTLE_ROYALE 
					&& inArray(arrayAntiBR, getFarmerName(target))) _COEF_DMG[target] = 25; 
				else _COEF_DMG[target] = 20;
				// ADD JACE BR
				if(getLife()/getTotalLife() > 0.9 && count(_ALIVE_ALLIES)>count(_ALIVE_ENEMIES)) _COEF_DMG[target]+= 15;
				if(lifeRatio<0.9)_COEF_DMG[target]+= 3;
				if(lifeRatio<0.8)_COEF_DMG[target]+= 3;
				if(lifeRatio<0.7)_COEF_DMG[target]+= 3;
				if(lifeRatio<0.6)_COEF_DMG[target]+= 8;
				else if(infos[_psnlife]/infos[_totallife]<0.25)_COEF_DMG[target]+= 20;
				else if(infos[_psnlife]/infos[_totallife]<0.5)_COEF_DMG[target]+= 10;

				if(getTotalLife(target)<1400)_COEF_DMG[target]+=5;
				if(getTotalLife(target)<1200)_COEF_DMG[target]+=5;
				if(getTotalLife(target)<1000)_COEF_DMG[target]+=5;
				if(getTotalLife(target)<800)_COEF_DMG[target]+=5;
				
				if(getScience(target)>=400)_COEF_DMG[target]+= 5;
				if(getWisdom(target)>=500)_COEF_DMG[target]+= -5;
				if(getMagic()>300 && (getCooldown(CHIP_ANTIDOTE, target)>1 || !inArray(getChips(target), CHIP_ANTIDOTE)))
					_COEF_DMG[target]+=25;
				if(getLevel(target)<getLevel()/1.5) _COEF_DMG[target]/= 2;
				if(infos[_psnlife]<=0) _COEF_DMG[target] /=3;
				_COEF_HEAL[target] = _COEF_DMG[target];
				_COEF_SHACKLE_TP[target] = 15;
				_COEF_SHACKLE_MP[target] = 15;
				_COEF_SHACKLE_STR[target] = 20;
				_COEF_SHACKLE_MGC[target] = 20;
				if(infos[_mgc]<200&&infos[_str]>200){
					if(infos[_str]>400) _COEF_SHACKLE_STR[target]*=6;
					else _COEF_SHACKLE_STR[target]*=4;
				}else if(infos[_mgc]>200&&infos[_str]<200){
					_COEF_SHACKLE_MGC[target] *=3;
				}
				if(infos[_str]<200) _COEF_SHACKLE_STR[target] /= 2;
				if(infos[_str]<100) _COEF_SHACKLE_STR[target] = 0;
				if(infos[_mgc]<200) _COEF_SHACKLE_MGC[target] /= 2;
				if(infos[_mgc]<100) _COEF_SHACKLE_MGC[target] = 0;
				_COEF_LIBERATE[target] = 5;
			}
			else{//bulb
				somme_life_enemy+=infos[_life]*0.2; // SUM LIFE ENEMY
				count_enemy+=0.5;// COUNT ENEMY BULB
				_COEF_DMG[target] = 14;
				if(_SNC_400) _COEF_DMG[target]+=16;
				if(eType==ENTITY_PUNY_BULB) _COEF_DMG[target] = 1;
				else if(eType==ENTITY_METALLIC_BULB){
					if(getStrength()>=200 && getMagic()<200) _COEF_DMG[target] = 19;	
					else if(getStrength()>=200) _COEF_DMG[target] = 10;
					else _COEF_DMG[target] = 1;
				}
				else if(eType==ENTITY_HEALER_BULB) _COEF_DMG[target] = 30;
				if(infos[_psnlife]<=0) _COEF_DMG[target] =0.1;
				_COEF_HEAL[target] = _COEF_DMG[target];
				_COEF_SHACKLE_TP[target] = 0.25;
				_COEF_SHACKLE_MP[target] = 0.25;
				_COEF_SHACKLE_STR[target] = 1;
				if(eType==ENTITY_HEALER_BULB 
				|| eType==ENTITY_METALLIC_BULB) _COEF_SHACKLE_STR[target] = 0;
				_COEF_SHACKLE_MGC[target] = 0;
				_COEF_LIBERATE[target] = 0.5;
			}
		}
	}// end for(var target in targets)
	if(__DDD_ON && getFightContext()==FIGHT_CONTEXT_CHALLENGE){
		_RATIO_IGNORE_DANGER = rand();
		_RATIO_DANGER = rand()*10;
		return;
	}
	if(idbulb==null){
		// fix des vals global
		_STATE_RATIO_PV = somme_life_ally/somme_life_enemy;
		_STATE_RATIO_NB = count_ally/count_enemy;
		
		if(_STATE_RATIO_PV > 3)  _RATIO_DANGER = 8;
		else if(_STATE_RATIO_PV > 2) _RATIO_DANGER = 11;
		else if(_STATE_RATIO_PV > 1.5) _RATIO_DANGER = 14;
		else if(_STATE_RATIO_PV > 1) _RATIO_DANGER = 17;
		else if(_STATE_RATIO_PV > 0.75) _RATIO_DANGER = 20;
		else if(_STATE_RATIO_PV > 0.5) _RATIO_DANGER = 24;
		else _RATIO_DANGER = 28;
		
		if(_STATE_RATIO_PV > 3 && getLife() > 1800 && (getRelativeShield()>0 || getAbsoluteShield()>0)) _RATIO_DANGER = 0;
		
		if(_STATE_RATIO_NB > 2) _RATIO_IGNORE_DANGER = 0.30;
		else if(_STATE_RATIO_NB > 1.2) _RATIO_IGNORE_DANGER = 0.20;
		else if(_STATE_RATIO_NB > 0.5) _RATIO_IGNORE_DANGER = 0.10;
		else _RATIO_IGNORE_DANGER = 0;
				
		if(getLife()<getTotalLife()*0.8) _RATIO_IGNORE_DANGER/=2;
		if(getLife()==getTotalLife() && _STATE_RATIO_NB > 1) _RATIO_IGNORE_DANGER += 0.1;
		if(count_ally>3) _RATIO_IGNORE_DANGER += 0.3;
		if(count_ally>4 && _RATIO_IGNORE_DANGER>0.9) _RATIO_IGNORE_DANGER = 0.9;
		else if(_RATIO_IGNORE_DANGER>0.7) _RATIO_IGNORE_DANGER = 0.7;
		
		if(_CANT_HEAL){
			_RATIO_DANGER = 8;
			_RATIO_IGNORE_DANGER = 0;
		}
		if(_IS_CAC && getLife()>getTotalLife()*0.7) _RATIO_DANGER/=2;
		
		
		if(getLife()==getTotalLife()) _SCORE_DEATH = 10000;
		else _SCORE_DEATH = 20000;
		_SCORE_LOCK = 100000;
		if(getLife()<getTotalLife()*0.6 && (_STR_300 ? getRelativeShield()>0 || getAbsoluteShield()>0 : true)){
			_SCORE_LOCK = 10000;
		}

		
	}
};

// TODO liberate remove reduc.
function getVirtualState(@leek, @stackOfResult){
    var state = _LEEKS[leek];
	if(stackOfResult[leek]==null) return @state;
	if(stackOfResult[leek][_debuff]==true){
		state[_psnTurn]*= 0.5;
		state[_psnlife] = state[_life]-state[_psnTurn];
		state[_psnTotal]*= 0.5;
		state[_absShield]*= 0.5;
		state[_relShield]*= 0.5;
		for(var e:var v in state[_effects]) state[_effects][e]*=0.5;
	}
	if(stackOfResult[leek][_antidote]==true){
		state[_psnlife] = state[_life];
		state[_psnTurn] = 0;
		state[_psnTotal] = 0;
	}
	state[_mp]-=stackOfResult[leek][_shackleMP];
	state[_absShield]+=stackOfResult[leek][_absShield];
	state[_relShield]+=stackOfResult[leek][_relShield];
	state[_str]+=stackOfResult[leek][_str];
	state[_rst]+=stackOfResult[leek][_rst];
    state[_life]-=stackOfResult[leek][_dmg];
    state[_life]+=stackOfResult[leek][_heal];
    if(state[_totallife]<state[_life])state[_life]=state[_totallife];
    state[_psnlife]-=stackOfResult[leek][_psn];
	state[_psnTurn]+=stackOfResult[leek][_psn];
    return @state;
}

function getSpecialChipScore(@item){
	var score = 0;
	if(item==CHIP_RESURRECTION){
			score=_RESU_SCORE;
	}else if(count(_ALIVE_ALLIES_BULBS)>=6) return 0;
	else{
		var cost = _ITEM_COST[item];
		if(item==CHIP_LIGHTNING_BULB){
			if(_COUNT_LIGHTNING==0) cost+=18;
			else cost+=2;
		}else if(item==CHIP_FIRE_BULB){
			if(_COUNT_FIRE==0) cost+=18;
			else cost+=2;
			if(round(rand()+0.1))score -=1;// 60-40 lightning over firebulb
		}else if(item==CHIP_HEALER_BULB){
			if(_COUNT_HEALER==0) cost+=39;
			else if(_COUNT_HEALER==1) cost+=29;
			else if(_COUNT_HEALER==2) cost+=7;
			else cost+=4;
		}else if(item==CHIP_METALLIC_BULB){
			if(_SNC_400 || _STR_300){
				if(_COUNT_METAL==0) cost+=38;
				else if(_COUNT_METAL==1) cost+=9;
			}else{
				cost/=2;
			}
		}
		if(_COUNT_ICED==0 && item==CHIP_ICED_BULB){
			cost+=18;
		}else if(_COUNT_ROCKY==0 && item==CHIP_ROCKY_BULB){
			cost+=8;
		}else if(count(_ALIVE_ALLIES_BULBS)-_COUNT_HEALER-_COUNT_METAL<=2){
			cost+=4;
		} 
		score += cost*(600-(count(_ALIVE_ALLIES_BULBS)*60)); // TODO ???
		if(_COUNT_HEALER>=3 && item == CHIP_HEALER_BULB) score/=5;
		if(_COUNT_METAL>=2 && item == CHIP_METALLIC_BULB) score/=5;
		if(_COUNT_METAL>=3 && item == CHIP_METALLIC_BULB) score=0;
	}
	return score;
}

function getScoreOfAction(@actionBin, @stackOfResult, @stackOfDeath){
	//DEBUG
	startBenchFunction("getScoreOfAction");
	//DEBUG
	var cacheThis = false;
	// gestion du cache
	var uniqId = ""+actionBin+stackOfResult+stackOfDeath;
	if(_CACHE_SCORE_ACTION[uniqId] != null){
		stackOfResult = _CACHE_SCORE_ACTION[uniqId][_stackOfResult];
		stackOfDeath = _CACHE_SCORE_ACTION[uniqId][_stackOfDeath];
		stopBenchFunction("getScoreOfAction");
		return _CACHE_SCORE_ACTION[uniqId][_score];
	}else{
		cacheThis = true;
	}
	var from, to, item, targets = @map_action_targets[actionBin];
	getActionFromBin_(actionBin, from, to, item);
		
	var me = getVirtualState(_SELF, stackOfResult),
	myStr = me[_str],
    myMgc = me[_mgc],
    myWis = me[_wsd],
	myRst = me[_rst],
	mySnc = me[_snc],
	myAgi = me[_agi],
	myAbsShield = me[_absShield],
	myRelShield = me[_relShield],
    lifeMissing = me[_totallife]-me[_life],
    area = _ITEM_AREA[item],
    isAOE = area==AREA_CIRCLE_1||area==AREA_CIRCLE_2||area==AREA_CIRCLE_3,
    effects = @_ITEM_EFFECTS[item],
    score = 0,
	isSelf = from==to;
	
	// gestion inaoe
 	if((item == CHIP_DRIP && getCellDistance(from, to)<=2) || item == CHIP_DEVIL_STRIKE){
		if(!inArray(targets, _SELF)) push(targets, _SELF);
		isSelf=true;
	}
	// gestion summon
	if(isSpecialChip(item)){
		score = getSpecialChipScore(item);
	}
	else for(var target in targets){
        if(target==_SELF && !isSelf) continue; // ignore self, je suis pas sur la case ici !
        if(stackOfDeath[target]!=null) continue; // si la cible est déjà morte, next !
        var virtualTargetState = getVirtualState(target, stackOfResult);
		var targetCell;
		if(target==_SELF) targetCell = from;
		else targetCell = getCell(target);
        var dmgRatio = isAOE? getDamagePercentage(targetCell, to, area) : 100;

        var minDmgValue=0, avgDmgValue=0, turnPsn=0, avgPsn=0, healValue=0, maxhpValue=0, absShieldValue=0, relShieldValue=0, boostStrValue=0, boostAgiValue=0, boostResValue=0, boostTPValue=0, boostMPValue=0, lifeSteal=0, shackleTPValue=0, shackleMPValue=0, shackleStrValue=0, shackleMgcValue=0, debuffValue=0, antidoteValue=0, returnDmgValue=0;
		var duration;
        for(var e in effects){
			var type = e[0];
			var min = e[1];
			var max = e[2];
			var moy = (min+max)/2;
			var optimistmoy = (max+moy)/2;
			var pessimistmoy = (min+moy)/2;
			duration = e[3];
			duration = duration == 0 ? 1 : // 0 => 1
				(duration == 2 ? 1.5 : // 2 => 1.5
				(duration == 3 ? 2.5 : // 3 => 2
				(duration == 4 ? 2.5 : // 4 => 2.5
				duration))); // 1 => 1
            if(type == EFFECT_DAMAGE){
                minDmgValue += ( pessimistmoy*(1+(myStr/100))
                    *(1-(virtualTargetState[_relShield]/100))
                    *(dmgRatio/100)) - virtualTargetState[_absShield];
                avgDmgValue += (optimistmoy*(1+(myStr/100))
                    *(1-(virtualTargetState[_relShield]/100))
                    *(dmgRatio/100)) - virtualTargetState[_absShield];
				if(avgDmgValue<0) avgDmgValue = 0;
            }
            else if(type == EFFECT_POISON){
                turnPsn += pessimistmoy*(1+(myMgc/100))*(dmgRatio/100);
                avgPsn += moy*(1+(myMgc/100))*(dmgRatio/100) *duration;
            }
            else if(type == EFFECT_HEAL){
                healValue = moy*(1+(myWis/100))*(dmgRatio/100)*duration;
            }
			else if(type == EFFECT_BOOST_MAX_LIFE){
				maxhpValue = moy*(1+(myWis/100))*(dmgRatio/100);
			}
			else if(type == EFFECT_ABSOLUTE_SHIELD){
				absShieldValue = moy*(1+(myRst/100))*(dmgRatio/100)*duration;
			}
			else if(type == EFFECT_RELATIVE_SHIELD){
				relShieldValue = moy*(1+(myRst/100))*(dmgRatio/100)*duration;
			}
			else if(type == EFFECT_BUFF_STRENGTH){
				boostStrValue = moy*(1+(mySnc/100))*(dmgRatio/100)*duration;
			}
			else if(type == EFFECT_BUFF_AGILITY
			|| type == EFFECT_BUFF_WISDOM){
				boostAgiValue = moy*(1+(mySnc/100))*(dmgRatio/100)*duration;
				// un seul test pour la simplcité pour le moment.
			}
			else if(type == EFFECT_BUFF_RESISTANCE){
				boostResValue = moy*(1+(mySnc/100))*(dmgRatio/100)*duration;
			}
			else if(type == EFFECT_BUFF_MP){
				boostMPValue = floor(moy*(1+(mySnc/100))*(dmgRatio/100))*duration;
			}
			else if(type == EFFECT_BUFF_TP){
				boostTPValue = floor(moy*(1+(mySnc/100))*(dmgRatio/100))*duration;
			}
			else if(type == EFFECT_SHACKLE_TP){
				//var mgcReduced = myMgc-virtualTargetState[_snc];
				//mgcReduced = mgcReduced < 0 ? 0 : mgcReduced;
				shackleTPValue = floor(pessimistmoy*(1+myMgc/100)*(dmgRatio/100))*duration;
			}
			else if(type == EFFECT_SHACKLE_MP){
				//var mgcReduced = myMgc-virtualTargetState[_snc];
				//mgcReduced = mgcReduced < 0 ? 0 : mgcReduced;
				shackleMPValue = floor(pessimistmoy*(1+myMgc/100)*(dmgRatio/100))*duration;
			}
			else if(type == EFFECT_SHACKLE_STRENGTH){
				//var mgcReduced = myMgc-virtualTargetState[_snc];
				//mgcReduced = mgcReduced < 0 ? 0 : mgcReduced;
				shackleStrValue = round(moy*(1+myMgc/100)*(dmgRatio/100))*duration;
			}
			else if(type == EFFECT_SHACKLE_MAGIC){
				//var mgcReduced = myMgc-virtualTargetState[_snc];
				//mgcReduced = mgcReduced < 0 ? 0 : mgcReduced;
				shackleMgcValue = round(moy*(1+myMgc/100)*(dmgRatio/100))*duration;
			}
			else if(type == EFFECT_DEBUFF){ // LIBERATION !
				debuffValue = _LEEKS[target][_scoreLibe];
			}
			else if(type == EFFECT_ANTIDOTE){
				antidoteValue= virtualTargetState[_psnTotal];	
			}
			else if(type == EFFECT_KILL){
				if(isSummon(target)&&isAlly(target)){
					minDmgValue = getLife(target);
					avgDmgValue = minDmgValue;
				}
			}
			else if(type == EFFECT_DAMAGE_RETURN){
				returnDmgValue=moy*(1+(myAgi/100))*(dmgRatio/100)*duration;
			}
			else if(type == EFFECT_AFTEREFFECT){
				minDmgValue = round(boostStrValue/duration);
				avgDmgValue = minDmgValue/10;//reduc pour utiliser quand mm dopage
			}
            else{
				debugE("unhandled:"+getWeaponName(item)+getChipName(item));
            }
			
			//gestion libé
			if(target==_SELF){
				if(stackOfResult[_SELF]==null)stackOfResult[_SELF]=[];
				var val = absShieldValue > 0 ? absShieldValue : 
							relShieldValue > 0 ? relShieldValue :
							boostStrValue > 0 ? boostStrValue :
							boostAgiValue > 0 ? boostAgiValue :
							boostResValue > 0 ? boostResValue : 
							boostTPValue > 0 ? boostTPValue :
							boostMPValue > 0 ? boostMPValue :
							returnDmgValue > 0 ? returnDmgValue : 0;
				if(val > 0){
					stackOfResult[_SELF][_scoreLibe]+= getLibeScore(type, val, duration);
				}
			}
        }
        // ici maybe check if damage pas < à 0 !
		//TODO dans le kill et le normal, faire les revoies de dégâts !
        if(minDmgValue>0 && virtualTargetState[_psnlife]<=minDmgValue){
			minDmgValue=virtualTargetState[_life];
            score+=minDmgValue*_COEF_DMG[target];
            stackOfDeath[target]=target;
			var isBulb = isSummon(target) ? (_SNC_400 ? 1.2 : 0.5) : 1;
			score+=_SCORE_KILL_DMG*_COEF_DMG[target]*isBulb;
			// mort de ses bulbes
			for(var bulb in virtualTargetState[_bulbs]){
				stackOfDeath[bulb]=bulb;
				score+=_SCORE_KILL_DMG*_COEF_DMG[bulb]*0.3;
			}
            //lifesteal
            lifeSteal+=minDmgValue*myWis/1000;
            if(lifeSteal>0 && target!=_SELF){
                if(lifeSteal>lifeMissing)lifeSteal=lifeMissing;
                lifeMissing-=lifeSteal;
                score-=lifeSteal*_COEF_HEAL[_SELF];
				if(stackOfResult[_SELF]==null)stackOfResult[_SELF]=[];
                stackOfResult[_SELF][_heal]+=lifeSteal;
            }
            //lifestealend
			//dmgReturn
			var dmgReturn = minDmgValue*virtualTargetState[_dmgReturn]/100;
			if(dmgReturn>0){
				if(dmgReturn>me[_life]+stackOfResult[_SELF][_heal]) score-=_SCORE_DEATH;
				score+=dmgReturn*_COEF_DMG[_SELF];
				if(stackOfResult[_SELF]==null)stackOfResult[_SELF]=[];
				stackOfResult[_SELF][_heal]-=dmgReturn;
			}
			//dmgReturnEnd
        }else if(turnPsn>0 && virtualTargetState[_psnlife] <= turnPsn){
			// kill poison, pas encore sur de comment je gère ça mieux...
            stackOfDeath[target]=target;
            score+=turnPsn*_COEF_DMG[target];
			var isBulb = isSummon(target) ? (_SNC_400 ? 1.2 : 0.3) : 1;
			score+=_SCORE_KILL_PSN*_COEF_DMG[target]*isBulb;
			// mort de ses bulbes
			for(var bulb in virtualTargetState[_bulbs]){
				stackOfDeath[bulb]=bulb;
				score+=_SCORE_KILL_PSN*_COEF_DMG[bulb];
			}
        }else{
            if(stackOfResult[target]==null)stackOfResult[target]=[];
            if(avgDmgValue){
                stackOfResult[target][_dmg]+=minDmgValue; // sauvegarde du min
                score +=avgDmgValue*_COEF_DMG[target]; // score de l'avg
                //lifesteal
                lifeSteal+=avgDmgValue*myWis/1000;
                if(lifeSteal>0 && target!=_SELF){
                    if(lifeSteal>lifeMissing)lifeSteal=lifeMissing;
                    lifeMissing-=lifeSteal;
                    score-=lifeSteal*_COEF_HEAL[_SELF];
					if(stackOfResult[_SELF]==null)stackOfResult[_SELF]=[];
                    stackOfResult[_SELF][_heal]+=lifeSteal;
                }
                //lifestealend
				//dmgReturn
				var dmgReturn = avgDmgValue*virtualTargetState[_dmgReturn]/100;
				if(dmgReturn>0){
					if(dmgReturn>me[_life]+stackOfResult[_SELF][_heal]) score-=_SCORE_DEATH;
					score+=dmgReturn*_COEF_DMG[_SELF];
					if(stackOfResult[_SELF]==null)stackOfResult[_SELF]=[];
					stackOfResult[_SELF][_heal]+= -dmgReturn;
				}
				//dmgReturnEnd
            }
            if(avgPsn){
                stackOfResult[target][_psn]+=turnPsn;
                var ratioBulb = isSummon(target) ? 1 : 1.2;
                score +=avgPsn*_COEF_DMG[target]*ratioBulb*_SELF_AGI;
            }
            if(healValue){
				if(item==CHIP_VACCINE){
					var onEffect = _LEEKS[target][_effects][item];
					if(onEffect != null) score+=onEffect*_COEF_VACCIN[target];
					score -=healValue*_COEF_VACCIN[target]*_SELF_AGI;
				}else{
					var totallife = virtualTargetState[_totallife];
					var targetMissingLife = totallife-virtualTargetState[_life];
					if(item==CHIP_REGENERATION){
						if(targetMissingLife >= healValue*0.9){
							if(healValue>targetMissingLife) healValue=targetMissingLife;
							stackOfResult[target][_heal]+=healValue;
							score -=healValue*_COEF_HEAL[target];
							if(isSummon(target))score/=4;
						}else{
							score -=200;
						}
					}else{
						if(healValue>targetMissingLife) healValue=targetMissingLife;
						stackOfResult[target][_heal]+=healValue;
						score -=healValue*_COEF_HEAL[target];
					}
				}
            }
			if(maxhpValue){
				score -= maxhpValue*_COEF_MAXHP_BOOST[target];
			}
			if(absShieldValue){
				var alreadyHaveArmor = stackOfResult[target][_absShield] > 0;
				var onEffect = _LEEKS[target][_effects][item];
				if(onEffect != null) score+=onEffect*_COEF_ABSSHIELD[target];
				else stackOfResult[target][_absShield]+=absShieldValue/duration;
				score -=absShieldValue*_COEF_ABSSHIELD[target]*_SELF_AGI;
				if(alreadyHaveArmor) score/=2;
				if(!_STR_100) score = 1;// todo del this & handle in coef.
			}
			if(relShieldValue){
				var alreadyHaveArmor = stackOfResult[target][_relShield] > 0;
				var onEffect = _LEEKS[target][_effects][item];
				if(onEffect != null) score+=onEffect*4*_COEF_RELSHIELD[target];
				else stackOfResult[target][_relShield]+=relShieldValue/duration;
				score-=relShieldValue*_SCORE_REL_SHIELD*_COEF_RELSHIELD[target]*_SELF_AGI;
				if(alreadyHaveArmor) score/=2;
				//*3 pour que 30% d'armure soit == à 90 armor abs environ
				// je pense que ce c'est discutable, selon les dégâts potentiels de l'adversaire, ptete faire un calcul en début de tour du "potentiel agressif" de la team en face en terme de force/science/magie pour orienter les choix ?
				if(!_STR_300) score = 1;
			}
			if(boostStrValue){
				var onEffect = _LEEKS[target][_effects][item];
				if(onEffect != null) score+=onEffect*_COEF_STR_BOOST[target];
				else stackOfResult[target][_str]+=boostStrValue/duration;
				score -= boostStrValue*_COEF_STR_BOOST[target]*_SELF_AGI;
			}
			if(boostAgiValue){
				var onEffect = _LEEKS[target][_effects][item];
				if(onEffect != null) score+=onEffect*_COEF_AGI_BOOST[target];
				score -= boostAgiValue*_COEF_AGI_BOOST[target]*_SELF_AGI;
			}
			if(boostResValue){
				var onEffect = _LEEKS[target][_effects][item];
				if(onEffect != null) score+=onEffect*_COEF_RST_BOOST[target];
				else stackOfResult[target][_rst]+=boostResValue/duration;
				score -= boostResValue*_COEF_RST_BOOST[target]*_SELF_AGI;
			}
			if(boostMPValue){
				var onEffect = _LEEKS[target][_effects][item];
				if(onEffect != null) score+=onEffect*40*_COEF_MP_BOOST[target];
				else stackOfResult[target][_mp]+=boostMPValue/duration;
				score -= boostMPValue*_SCORE_MP*_COEF_MP_BOOST[target]*_SELF_AGI;
			}
			if(boostTPValue){
				var onEffect = _LEEKS[target][_effects][item];
				if(onEffect != null) score+=onEffect*40*_COEF_TP_BOOST[target];
				score -= boostTPValue*_SCORE_TP*_COEF_TP_BOOST[target]*_SELF_AGI;
			}
			if(shackleTPValue){
				score += shackleTPValue*_SCORE_TP*_COEF_SHACKLE_TP[target]*_SELF_AGI;
				stackOfResult[target][_shackleTP]+=shackleMgcValue/duration;
			}
			if(shackleMPValue && virtualTargetState[_mp]-stackOfResult[target][_shackleMP]>0){
				score += shackleMPValue*_SCORE_MP*_COEF_SHACKLE_MP[target]*_SELF_AGI;
				stackOfResult[target][_shackleMP]+=shackleMPValue/duration;
			}
			if(shackleStrValue){
				score += shackleStrValue*_COEF_SHACKLE_STR[target]*_SELF_AGI;
				stackOfResult[target][_shackleStr]+=shackleStrValue/duration;
			}
			if(shackleMgcValue){
				score += shackleMgcValue*_COEF_SHACKLE_MGC[target]*_SELF_AGI;
				stackOfResult[target][_shackleMgc]+=shackleMgcValue/duration;
			}
			if(debuffValue){
				stackOfResult[target][_debuff]=true;
				score += debuffValue*_COEF_LIBERATE[target];
			}
			if(antidoteValue){
				stackOfResult[target][_antidote]=true;
				score -= antidoteValue*_COEF_HEAL[target];
			}
			if(returnDmgValue){
				var onEffect = _LEEKS[target][_effects][item];
				if(onEffect != null) score+=onEffect*4*_COEF_RETURN_DMG[target];
				else stackOfResult[target][_relShield]+=returnDmgValue;
				score -=returnDmgValue*_SCORE_REL_SHIELD*_COEF_RETURN_DMG[target];
				if(!_STR_300) score = 1;
			}
        }
    }
	if(cacheThis){
		_CACHE_SCORE_ACTION[uniqId] = [];
		_CACHE_SCORE_ACTION[uniqId][_stackOfResult] = stackOfResult;
		_CACHE_SCORE_ACTION[uniqId][_stackOfDeath] = stackOfDeath;
		_CACHE_SCORE_ACTION[uniqId][_score] = score;
	}
	stopBenchFunction("getScoreOfAction");
    return @score;
}

function getBestSafeCellScore(@canAlterDanger, @aCell, @dead, @stack, @selfLife, @lifePercent, @mpLeft, @selfCell){
	startBenchFunction("getBestSafeCellScore");
	var uniqId = canAlterDanger ? getUniqueID_safeCell(aCell, dead, stack) : getUniqueID_safeCell(aCell, dead, "");
	if(_CACHE_SCORE_SAFECELL[uniqId]==null){
		var ignored = [selfCell];
		for(var d in dead) push(ignored, getCell(d));
		if(_CACHE_REACHABLE_DANGER[aCell]==null){
			_CACHE_REACHABLE_DANGER[aCell] = getReachableCells([aCell:0], mpLeft, ignored);
			_CACHE_REACHABLE_SIZE[aCell] = mpLeft;
		}else if(_CACHE_REACHABLE_SIZE[aCell] < mpLeft){
			_CACHE_REACHABLE_DANGER[aCell] = getReachableCells(_CACHE_REACHABLE_DANGER[aCell], mpLeft-_CACHE_REACHABLE_SIZE[aCell], ignored);
			_CACHE_REACHABLE_SIZE[aCell] = mpLeft;
		}
		var reachable = @_CACHE_REACHABLE_DANGER[aCell];
		
		var minDanger = 9999999;
		var bestScore = -9999999;
		var safestCell, finalmpUsed, finaltpleft;
		var nearECell = getCell(_NEAREST_ENEMY_LEEK);
		var coefNear = _IS_CAC ? 6 : 2;
		var mpE = getMP(_NEAREST_ENEMY_LEEK), mpSelf = getMP();
		mpE -= stack[_NEAREST_ENEMY_LEEK][_shackleMP];
		for(var sCell:var mpused in reachable){
			if(mpused > mpLeft) break;
			var tmpScore = 0, danger = null, mpUsed = null, cellDanger = null;
			if(_RATIO_DANGER > 0) {
				cellDanger = getCellDanger(sCell, dead, stack);
				danger = cellDanger[_danger];
				mpUsed = cellDanger[_mpused];
				if(danger > selfLife*_RATIO_IGNORE_DANGER) tmpScore-= danger*_RATIO_DANGER;
				if(lifePercent<0.6) tmpScore*=2;
				if(danger>selfLife/2)tmpScore*=3;
				if(danger >= selfLife*_RATIO_RISK_DEATH) tmpScore-=_SCORE_DEATH;
				if(tmpScore < 0) tmpScore+= mpUsed*_RATIO_MP_USED;
			}
			for(var cell in _areaCells1[sCell]) if(_LEEKS_CELL[cell]!=null && nearECell!=cell) tmpScore-=150;
			for(var cell in _areaCells2[sCell]) if(_LEEKS_CELL[cell]!=null && nearECell!=cell) tmpScore-=20;
			for(var cell in _areaCells3[sCell]) if(_LEEKS_CELL[cell]!=null && nearECell!=cell) tmpScore-=10;
			for(var cell:var dist in _GRAVITY_CELLS){
				if(cell==nearECell){
					if(_NEARE_FULLMAP_PATH_DIST!=null){
						var pathDist = _NEARE_FULLMAP_PATH_DIST[sCell];
						if(_IS_CAC && pathDist!=null && pathDist + mpE <= mpSelf) tmpScore += 1000; // bonus inrange
						if(pathDist==null) tmpScore -= abs(dist-getCellDistance(cell, sCell))*coefNear*_GRAVITY_COEFS[cell];
						else tmpScore -= abs(dist-pathDist)*2*_GRAVITY_COEFS[cell];
					}else tmpScore -= abs(dist-getCellDistance(cell, sCell))*2*_GRAVITY_COEFS[cell];
				}else tmpScore -= abs(dist-getCellDistance(cell, sCell))*_GRAVITY_COEFS[cell];
			}
			if(count(@_areaCells1[nearECell])==1){
				for(var cell in _areaCells1[nearECell]){
					if(cell==sCell) tmpScore+= _SCORE_LOCK;
				}
			}
			if(safestCell==null || tmpScore > bestScore){
				safestCell = sCell;
				minDanger = danger;
				bestScore = tmpScore;
				finalmpUsed = mpUsed;
				finaltpleft = cellDanger[_tpleft];
			}
		}
		_CACHE_SCORE_SAFECELL[uniqId] = @[_sCell:safestCell, _danger:minDanger, _score:bestScore, _mpused:finalmpUsed, _tpleft:finaltpleft];
	}
	stopBenchFunction("getBestSafeCellScore");
	return @_CACHE_SCORE_SAFECELL[uniqId];
}

// new safe cell
function getSafeScore(@fromC,@mp,@dead,@stack){var n="getSafeScore";startBenchFunction(n);
	var uniqId = getUniqIdCellDead(fromC, dead);
	var result = @_CACHE_SCORE_SAFECELL[uniqId];
	if(result==null){
		var minDanger = _MAX_INT, score = _MIN_INT, safeCell = -1, mpUsed = -1;
		var altMp = stack[_SELF][_mp], totalMp = getMP()+altMp, mpLeft = mp+altMp, 
		life = getLife()+stack[_SELF][_life]; // TODO CHECK LES CLES.
		/*bricolage*/var coefNear = _IS_CAC ? 6 : 2;/*bricolage*/
		var nearECell = getCell(_NEAREST_ENEMY_LEEK), mpE = getMP(_NEAREST_ENEMY_LEEK);
		var reachable = getCachedReachableCells(fromC, mpLeft, dead);
		for(var sCell:var mpused in reachable){ if(mpused > mp) break;
			// gestion du danger
			var tmpScore=0, danger=null, eMpUsed=null;
			if(_RATIO_DANGER > 0){
				var cellDanger = getCellDanger(sCell, dead, stack);
				danger = cellDanger[_danger];
				eMpUsed = cellDanger[_mpused];
				tmpScore -= danger < life*_RATIO_IGNORE_DANGER ? 0 
					: danger < life*_RATIO_RISK_DEATH ? 
						danger*_RATIO_DANGER
						: danger*_RATIO_DANGER + _SCORE_DEATH;
				// enemy mp used
				tmpScore += tmpScore == 0 ? 0 : eMpUsed*_RATIO_MP_USED;
			}
			// espacement entre les leeks
			for(var cell in _areaCells1[sCell]) if(_LEEKS_CELL[cell]!=null) tmpScore-=150;
			for(var cell in _areaCells2[sCell]) if(_LEEKS_CELL[cell]!=null) tmpScore-=20;
			for(var cell in _areaCells3[sCell]) if(_LEEKS_CELL[cell]!=null) tmpScore-=10;
			// gravityCells
			for(var cell:var dist in _GRAVITY_CELLS){				
				if(cell==nearECell){
					if(_NEARE_FULLMAP_PATH_DIST!=null){
						var pathDist = _NEARE_FULLMAP_PATH_DIST[sCell];
						if(pathDist==null){
							tmpScore -= abs(dist-getCellDistance(cell, sCell))*_GRAVITY_COEFS[cell];
						}else{
							tmpScore -= abs(dist-pathDist)*coefNear*_GRAVITY_COEFS[cell];
							// bonus cac inrange
							if(_IS_CAC && pathDist+mpE <= totalMp) tmpScore += 600; 
						}
					}else tmpScore -= abs(dist-getCellDistance(cell, sCell))*2*_GRAVITY_COEFS[cell];
				}else tmpScore -= abs(dist-getCellDistance(cell, sCell))*_GRAVITY_COEFS[cell];
			}
			// blocking
			if(count(@_areaCells1[nearECell])==1){
				for(var cell in _areaCells1[nearECell]){
					if(cell==sCell) tmpScore+= _SCORE_LOCK;
				}
			}
			// validation du meilleure coup
			if(safeCell==null || tmpScore > score){
				safeCell = sCell;
				minDanger = danger;
				score = tmpScore;
				mpUsed = eMpUsed;
			}
		} // caching de l'objet résultat.
		result = @[_sCell: safeCell, _danger: minDanger, _score: score, _mpused: mpUsed];
		_CACHE_SCORE_SAFECELL[uniqId] = @result;
	}
	stopBenchFunction(n); return result;
}
