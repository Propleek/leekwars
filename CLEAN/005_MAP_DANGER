include('auto');

function getDmgMap(@enemy, @item){
	var eCell = getCell(enemy), eMp = getMP(enemy), ignored, map = [];
	var area = _ITEM_AREA[item],
	maxscope = _ITEM_MAXRANGE[item],
	minscope = _ITEM_MINRANGE[item],
	inline = _ITEM_INLINE[item],
	needlos = _ITEM_NEEDLOS[item];
    // ignoring me cuz i move, him cuz he wont be block by himself & all that play before
	var leekToIgnore = [getLeek(), enemy] + getListOfLeekWhoPlayBefore(enemy);
    var cellToIgnore = [];
    for(var l in leekToIgnore) push(cellToIgnore, getCell(l));
	
    var moveCells = getReachableCells([eCell:0], eMp, cellToIgnore);
	// moveCells est ordonné de 0 à maxMP de par l'algo, je m'appuie dessus pour que ça marche.
	if(_IS_SHACKLE_MP){
		var mapMp = [];
		var currentMP = 0;
		for(var c:var dist in moveCells){
			if(dist>currentMP){
				var mapTmp = map;
				if(area==AREA_CIRCLE_1 || area==AREA_CIRCLE_2 || area==AREA_CIRCLE_3){
					for(var distance = 1; distance<=area-2; distance++){
						var ratio = (100 - ((50 / (area-2)) * distance))/100;
						if(ratio ==0) break;
						var circle = [];
						for(var ce:var value in mapTmp){
							if(value>0)
								for(var cell in @_areaCells1Obstacle[ce])
									if(mapTmp[cell]==null || mapTmp[cell]==0) 
										push(circle, cell);
						}
						for(var cell in circle) mapTmp[cell] = ratio;
					}
				}
				mapMp[currentMP] = @mapTmp;
				currentMP=dist;
			}
			var targetableCells = _getTargetableCells(item, c);
			for(var cell in targetableCells){
				if(map[cell]==null){
					map[cell]=1;//coef
				}
			}
		}
		//dernière valeur de MP :)
		var mapTmp = map;
		if(area==AREA_CIRCLE_1 || area==AREA_CIRCLE_2 || area==AREA_CIRCLE_3){
			for(var distance = 1; distance<=area-2; distance++){
				var ratio = (100 - ((50 / (area-2)) * distance))/100;
				if(ratio ==0) break;
				var circle = [];
				for(var ce:var value in mapTmp){
					if(value>0)
						for(var cell in @_areaCells1Obstacle[ce])
							if(mapTmp[cell]==null || mapTmp[cell]==0) 
								push(circle, cell);
				}
				for(var cell in circle) mapTmp[cell] = ratio;
			}
		}
		mapMp[currentMP] = @mapTmp;
		return @mapMp;
	}else{ // classique.
		for(var c:var dist in moveCells){
			var targetableCells = _getTargetableCells(item, c);
			for(var cell in targetableCells){
				if(map[cell]==null){
					map[cell]=1;//coef
				}
			}
		}
		//aoe
		if(area==AREA_CIRCLE_1 || area==AREA_CIRCLE_2 || area==AREA_CIRCLE_3){
			for(var distance = 1; distance<=area-2; distance++){
				var ratio = (100 - ((50 / (area-2)) * distance))/100;
				if(ratio ==0) break;
				var circle = [];
				for(var c:var value in map){
					if(value>0)
						for(var cell in @_areaCells1Obstacle[c])
							if(map[cell]==null || map[cell]==0) push(circle, cell);
				}
				for(var cell in circle) map[cell] = ratio;
			}
		}
		return @map;
	}
}

/**
 * Retourne null ou un tableau [cell:damage] pour un ennemi donné à une arme/puce donnée
 * @param int enemy ID de l'ennemi ciblé
 * @param int weaponOrChip ID de l'arme ou de la puce à tester
 */
function getDmgMap2(@enemy, @weaponOrChip){
	var eCell = getCell(enemy), eMp = getMP(enemy);
    var area = _ITEM_AREA[weaponOrChip],
	maxscope = _ITEM_MAXRANGE[weaponOrChip],
	minscope = _ITEM_MINRANGE[weaponOrChip],
	inline = _ITEM_INLINE[weaponOrChip],
	needlos = _ITEM_NEEDLOS[weaponOrChip];
   
    // ignoring me cuz i move, him cuz he wont be block by himself & all that play before
    var leekToIgnore = [getLeek(), enemy] + getListOfLeekWhoPlayBefore(enemy);
    var cellToIgnore = [];
    for(var l in leekToIgnore) push(cellToIgnore, getCell(l));
   
    var ignored;
    // TODO : il faut aussi ignorer les leeks adv qui joue avant l'adv, mais méga flemme de le faire bien là...
    if(area == AREA_LASER_LINE) ignored = getListOfLeekToIgnoreForLazer(enemy);
    else ignored = @leekToIgnore;
 
    // his move
    var moveCells = getReachableCells([eCell:0], eMp, cellToIgnore);
	var keys = [];
	for(var cell:var dist in moveCells) push(keys, cell);
    // the first map.
    var map = [];
	
	//cells to check for dmg.
	var cells = @_CELLS_NO_OBSTACLES;	

    for(var i in cells){
        if(_OBSTACLES[i] != null)continue; // si c'est un obstacle on fait pas la cell
        map[i]= 0;
		//Si la cellule est trop loin du move max de l'adv + range
		if(getCellDistance(i, eCell) > (eMp + maxscope))continue;
		// sinon on regarde si il peut la toucher.
		for(var j = count(keys)-1; j>=0; j--){
			var mc = keys[j];
            var dist = getCellDistance(i, mc);
            if(dist <= maxscope
            && dist >= minscope
            && (!inline || isOnSameLine(i, mc))
            && (!needlos || lineOfSight(i, mc, ignored))){
                map[i] = 1;
                break;
            }
        }//end movecellz
    }//end mapcells
    if(area==AREA_CIRCLE_1 || area==AREA_CIRCLE_2 || area==AREA_CIRCLE_3){
		for(var distance = 1; distance<=area-2; distance++){
			var ratio = (100 - ((50 / (area-2)) * distance))/100;
			if(ratio ==0) break;
			var circle = [];
			for(var c:var value in map){
				if(value>0)
					for(var cell in @_areaCells1Obstacle[c])
						if(map[cell]==null || map[cell]==0) push(circle, cell);
			}
			for(var cell in circle) map[cell] = ratio;
		}
	}
    return @map;
}

// retourne les items de l'adv ordonnés par danger.
function getOrderedWeapChipScore(@enemy, eStr, eMgc, eWsd){
    var dmg, cost, effects, allChipWeap = [], stuff = getWeapons(enemy)+getChips(enemy);
    for(var item in stuff){
        if(item == CHIP_BURNING || item == CHIP_DEVIL_STRIKE ){
			continue;
		}
		//if(item == WEAPON_BROADSWORD || item == WEAPON_AXE || item == WEAPON_KATANA) continue;
		else if(item == CHIP_LIBERATION){
			allChipWeap[item] = _LEEKS[_SELF]["scoreLibe"]/_ITEM_COST[item];
			continue;
		}
		if(isSpecialChip(item))continue;
		if(_ITEM_HAVECD[item] && getCooldown(item, enemy)!=0) continue;
        dmg=0;
		effects = _ITEM_EFFECTS[item];
		cost = _ITEM_COST[item];
        if(effects[0][0] == EFFECT_DAMAGE || effects[0][0] == EFFECT_POISON){
            for(var e in effects){
                if(e[0] == EFFECT_DAMAGE ){
                    dmg+= e[2]*(1+(eStr/100));
                }
                else if(e[0] == EFFECT_POISON){
                    dmg += e[1]*(1+(eMgc/100)) *e[3];
                }
                else if(e[0] == EFFECT_HEAL){
                    dmg -= ((e[1]+e[2])/2)*(1+(eWsd/100));
                }
                // ici add les effets d'entrave en score pts->dmg
            }
            allChipWeap[item] = dmg/cost;
        }
    }
	
	allChipWeap = arraySort(allChipWeap, function(a,b){	
		if(a<b) return 1;
		else if(a>b) return -1;
		return 0;
	});
    return @allChipWeap;
}

// load les maps armes par armes pour chaque adv dans l'ordre de danger
function loadMapsDanger(maxOp){
	//ignoreMPLeek();
	var startOperation = getOperations();
	map_leek_weap_danger = [];//reset de la map
	var maxIndex = [];
	var theMax = 0;
	for(var e in _ALIVE_ENEMIES_DANGER){
		map_leek_weap_danger[e] = [];//reset de la map
		var info = _LEEKS[e];
		var weapChips = getOrderedWeapChipScore(e,info["str"],info["mgc"],info["wsd"]);
		_LEEKS[e]['items'] = []; //reset du stuff
		var minItemCost = 8;
		for(var weapChip : var dmg in weapChips){
			if(dmg>0){
				push(_LEEKS[e]['items'], [
					'item' : weapChip,
					'damage' : dmg
				]);
				if(_ITEM_COST[weapChip]<minItemCost){
					minItemCost=_ITEM_COST[weapChip];
				}
			}
		}
		_LEEKS[e]["minItemCost"]=minItemCost;
		maxIndex[e] = count(_LEEKS[e]['items']);
		if(theMax<maxIndex[e]) theMax = maxIndex[e];
	}
	_INDEX_DANGER=theMax;
	for(var index = 0; index < theMax; index++){
		for(var e in _ALIVE_ENEMIES_DANGER){
			if(index<maxIndex[e]){
				var item = _LEEKS[e]['items'][index]["item"];
				map_leek_weap_danger[e][item] = getDmgMap(e, item);
				if(e==_ALIVE_ENEMIES_DANGER[0]) debugE((index+1)+getItemName(item));
			}
		}
		if(index > 0 && getOperations()-startOperation>maxOp){
			debugE('Turn'+getTurn()+' breaking loadMapsDanger at index: '+index);
			_INDEX_DANGER=index;
			break;
		}
	}
}

function getSimplifiedVirtualStateDef(@leek, @stackOfResult){
	var state = [], info = @_LEEKS[leek];
	state["absShield"] = info["absShield"];
	state["relShield"] = info["relShield"];
	if(stackOfResult[leek]==null) return @state;
	if(stackOfResult[leek]["debuff"]==true){
		state["absShield"]=0;
		state["relShield"]=0;
	}
	state["absShield"]+=stackOfResult[leek]["absShield"];
	state["relShield"]+=stackOfResult[leek]["relShield"];
	return @state;
}

function getSimplifiedVirtualStateAtk(@leek, @stackOfResult){
	var state = [], info = @_LEEKS[leek];;
	state["str"] = info["str"];
	state["mgc"] = info["mgc"];
	state["tp"] = info["tp"];
	state["mp"] = info["mp"];
	if(stackOfResult[leek]==null) return @state;
	if(stackOfResult[leek]["debuff"]==true){
		state["str"]-= info["alterateStr"];
		state["mgc"]-= info["alterateMgc"];
		state["tp"]-= info["alterateTP"];
		state["mp"]-= info["alterateMP"];
	}
	state["str"]-= stackOfResult["shackleStr"];
	state["mgc"]-= stackOfResult["shackleMgc"];
	state["tp"]-= stackOfResult["shackleTP"];
	state["mp"]-= stackOfResult["shackleMP"];
    return @state;
}

function getItemDmg(@item, @eMgc, @eStr, @absShield, @relShield, @ratio){
	var dmg = 0;
	if(item==CHIP_LIBERATION){
		return _LEEKS[_SELF]["scoreLibe"];
	}
	// FIXME truc chiant à gérer...
	if(item==CHIP_BURNING) return 0;
	var effects = @_ITEM_EFFECTS[item];
    for(var e in effects){
		var type = e[0];
		var optiMoy = (e[1]+3*e[2])/4;
        if(type == EFFECT_DAMAGE){
            var tmp = optiMoy*(1+(eStr/100));
            tmp = (tmp *ratio *(1-(relShield/100))) -absShield;
            dmg+= tmp;
        }
        else if(type == EFFECT_POISON){
			var duration = e[3];
			duration = duration == 0 ? 1 : // 0 => 1
				(duration == 2 ? 1.75 : // 2 => 1.75
				(duration == 3 ? 2.25 : // 3 => 2.25
				(duration == 4 ? 2.5 : // 4 => 2.5
				duration))); // 1 => 1
            dmg += optiMoy*(1+(eMgc/100)) *ratio *duration;
        }
    }
    // vérif qu'on est pas en négatif
    if(dmg < 0) dmg = 0;
    return @dmg;
}

// à besoin de loadMapsDanger(maxOp) pour renvoyer un vrai score.
function getCellDanger(@cell, @ignoreLeeks, @stack){
	var uniqId = cell+ignoreLeeks+stack;
	if(_CACHE_DANGER[uniqId]==null){
		var id = getLeekOnCell(cell);
		if(id==-1||isEnemy(id)){ // permet de renvoyer le danger de l'ally si il est sur la case cell, sinon pour moi même.
			id=_SELF;
		}
		var defendingState = getSimplifiedVirtualStateDef(id, stack);
		var absShield = defendingState["absShield"], relShield = defendingState["relShield"];
		var finalDanger = 0;
		for(var enemy in _ALIVE_ENEMIES_DANGER){
			if(inArray(ignoreLeeks, enemy)) continue;
			var offensivState = getSimplifiedVirtualStateAtk(enemy, stack);
			var items = @_LEEKS[enemy]["items"],
			minItemCost = @_LEEKS[enemy]["minItemCost"],
			TP = offensivState["tp"],
			str = offensivState["str"],
			mgc = offensivState["mgc"],
			MP = offensivState["mp"],
			inHand = getWeapon(enemy);
			var cnt=0;
			for(var i in items){
				if(_INDEX_DANGER < cnt++) break;
				var item = i["item"];
				var ratio;
				if(_IS_SHACKLE_MP){
					ratio = map_leek_weap_danger[enemy][item][MP][cell];
				}else{
					ratio = map_leek_weap_danger[enemy][item][cell];
				}
				if(ratio>0){
					var uniqIdDmg = item+"-"+str+"-"+mgc+"/"+absShield+"-"+relShield+"/"+ratio;
					if(_CACHE_WEAPDMG[uniqIdDmg]==null){
						_CACHE_WEAPDMG[uniqIdDmg] = getItemDmg(item, mgc, str, absShield, relShield, ratio);
					}
					var damage = _CACHE_WEAPDMG[uniqIdDmg], cost = _ITEM_COST[item], switch=0;
					if(item==CHIP_LIBERATION && stack[_SELF]["scoreLibe"] > 0){
						damage += stack[_SELF]["scoreLibe"];
					}else if(_ITEM_ISWEAP[item] && item!=inHand){
						switch=1;
						inHand=item;
					}
					while(cost+switch<=TP){
						finalDanger+= damage;
						TP-=cost+switch;
						if(switch>0)switch=0;
						if(_ITEM_HAVECD[item]) break;
					}
					if(minItemCost>TP) break;
				}
			}
			if(TP<0) debugE("TP NOK §§§: " + TP);
		}
		_CACHE_DANGER[uniqId]=finalDanger;
	}
	return @_CACHE_DANGER[uniqId];
}

// à besoin de loadMapsDanger(maxOp) pour renvoyer un vrai score.
function getMapDanger(ignoreLeeks){
	var finalMap = [];
	for(var cell in _CELLS_NO_OBSTACLES){
		finalMap[cell] = getCellDanger(cell, ignoreLeeks, []);
	}
	return @finalMap;
}

function findSafestCellToRez(@leek, @from){
	var ignore = getListOfEnemyLeekWhoPlayAfter(leek);
	var maxrange = _ITEM_MAXRANGE[CHIP_RESURRECTION];
	var nearEnemyCell=getCell(getNearestEnemy());
	var safeCell, dangerCell, distToEnemy, x = getCellX(from), y = getCellY(from);
	var tryCloser = true;
	if(getStrength(leek)<400) tryCloser = false;
	for(var x1 = x-maxrange; x1 <= x+maxrange; x1++){
		for(var y1 = y-maxrange; y1 <= y+maxrange; y1++){
			var dist =((x-x1)<0?-(x-x1):x-x1)+(y-y1<0?-(y-y1):y-y1);//trick pour abs(x-x1)+abs(y-y1)..
			if(dist > maxrange) continue;
			var targetCell = getCellFromXY(x1, y1);
			if(targetCell!=null
			&& targetCell!=from
			&& _OBSTACLES[targetCell]==null 
			&& _LEEKS_CELL[targetCell]==null
			&& lineOfSight(from, targetCell, _SELF)){
				var danger = getCellDanger(targetCell, ignore, _EMPTYARRAY);
				if(!safeCell || dangerCell>danger){
					safeCell=targetCell;
					dangerCell=danger;
					distToEnemy = getCellDistance(targetCell, nearEnemyCell);
				}else if(tryCloser && dangerCell==danger && distToEnemy>getCellDistance(targetCell, nearEnemyCell)){
					safeCell=targetCell;
					distToEnemy = getCellDistance(targetCell, nearEnemyCell);
				}
			}
		}
	}
	return safeCell;
}