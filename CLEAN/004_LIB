include('auto');
///////////////////////////////////////////
// Ma lib
///////////////////////////////////////////

// retourne le type de l'entity
function getEntityType(@entity){
	if(!isSummon(entity)) return @ENTITY_LEEK_;
	var chips = getChips(entity);
	if(inArray(chips, CHIP_VACCINE)) return @ENTITY_HEALER_BULB;
	if(inArray(chips, CHIP_ARMOR)) return @ENTITY_METALLIC_BULB;
	if(inArray(chips, CHIP_ROCKFALL)) return @ENTITY_ROCKY_BULB;
	if(inArray(chips, CHIP_ICEBERG)) return @ENTITY_ICED_BULB;
	if(inArray(chips, CHIP_METEORITE)) return @ENTITY_FIRE_BULB;
	if(inArray(chips, CHIP_LIGHTNING)) return @ENTITY_LIGHTNING_BULB;
	return @ENTITY_PUNY_BULB; 
}

/**
 * Retourne la liste de tous les poireaux/bulbes qui vont jouer entre l'entité donné et le lanceur de la fonction
 *
 * @param int leek ID de l'entité ciblée
 *
 * @return array Tableau des ID des entités qui vont jouer entre le caster et la cible (caster et cible exclus)
 */
function getListOfLeekWhoPlayBefore(@leek){
	var leekWhoPlayBefore = [];
	if(getLevel()<46) return @leekWhoPlayBefore;
	var casterTurnOrder = getEntityTurnOrder();
	var limitTurnOrder = getEntityTurnOrder(leek);
	for(var entity in getAliveAllies() + getAliveEnemies()){
		var entityTurnOrder = getEntityTurnOrder(entity);
		//Cas le plus simple, on récupère les entités entre le caster et la cible
		if(casterTurnOrder < limitTurnOrder){
			//si l'entité est entre le caster et la cible
			if(casterTurnOrder < entityTurnOrder && entityTurnOrder < limitTurnOrder){
				push(leekWhoPlayBefore, entity);
			}
		}
		//Plus complexe, la cible joue avant le caster
		else{
			//On récupère déjà toutes les entités jouant après le caster, sans limite
			if(casterTurnOrder < entityTurnOrder){
				push(leekWhoPlayBefore, entity);
			}
			//Puis toutes celles jouant avant la cible
			if(entityTurnOrder < limitTurnOrder){
				push(leekWhoPlayBefore, entity);
			}
		}
	}
	return @leekWhoPlayBefore;
}

function getDamagePercentage(@cell1, @cell2, @area) {     
	if (cell1 == cell2) return 100;
	var dist = getCellDistance(cell1, cell2),
	areaDist = area-2;// tricks pour win 5op ! mais la func bug si area_circle change de value de constante
	if(dist > areaDist ) return 0;
	return @(100 - ((50 / areaDist) * dist));
}

function getAllEnemyBulb(){
	var bulbz = [];
	for(var en in getAliveEnemies()) if(isSummon(en)) push(bulbz, en);
	return @bulbz;
}

// return an array of cells according to AREA_CIRCLE_XX
// cost 3, 4 or 5 op more than @_areaCellsX[cell]
// depending of number of if()
// 1 op per if + 1 for calling func + 1 from I dunno ?
// so use directly the array for final version of optimised func
function getCellArea(@c, @area){
	if(area == AREA_CIRCLE_1) return @_areaCells1[c];
	if(area == AREA_CIRCLE_2) return @_areaCells2[c];
	if(area == AREA_CIRCLE_3) return @_areaCells3[c];
	return null;
}

// renvoie si la puce a un effet positif ou négatif sur la cible
function isPositivChip(@c){
	return @_CHIP_ISPOSITIV[c];
}

// renvoie si la puce fait partie des puces non-standard
// soit summon, resurrection (cible les morts), teleport & inversion (déplacement)
function isSpecialChip(@c){
	return @(_CHIP_ISSPECIAL[c]!=null);
}

// return an array of cell that can be targeted with lazer from c using minrange
function getLazerTargetsCell(@c, @minrange){
	var x = getCellX(c), y = getCellY(c), result = [];
	var cell = getCellFromXY(x+minrange, y);
	if(cell!=null && _OBSTACLES[cell]==null && lineOfSight(c, cell)) push(result, cell);
	cell = getCellFromXY(x-minrange, y);
	if(cell!=null && _OBSTACLES[cell]==null && lineOfSight(c, cell)) push(result, cell);
	cell = getCellFromXY(x, y+minrange);
	if(cell!=null && _OBSTACLES[cell]==null && lineOfSight(c, cell)) push(result, cell);
	cell = getCellFromXY(x, y-minrange);
	if(cell!=null && _OBSTACLES[cell]==null && lineOfSight(c, cell)) push(result, cell);
	return @result;
}

// return lazerTargets array
function getLazerTargetsFromCell(@from, @to, @minrange, @maxrange){
	var xFrom = getCellX(from), yFrom = getCellY(from),
		xTo = getCellX(to), yTo = getCellY(to), result = [],
		inc = 0, maxInc = maxrange-minrange, tmpCell, tmpContent;
	
	if(xFrom==xTo){
		if(yFrom<yTo){
			// y++
			while(true){
				tmpCell = getCellFromXY(xTo, yTo+inc);
				if(tmpCell == null || _OBSTACLES[tmpCell]!=null || inc > maxInc) break;
				tmpContent = getCellContent(tmpCell);
				if(tmpContent == CELL_PLAYER) push(result, getLeekOnCell(tmpCell));
				inc++;
			}
		}else{
			// y--
			while(true){
				tmpCell = getCellFromXY(xTo, yTo-inc);
				if(tmpCell == null || _OBSTACLES[tmpCell]!=null || inc > maxInc) break;
				tmpContent = getCellContent(tmpCell);
				if(tmpContent == CELL_PLAYER) push(result, getLeekOnCell(tmpCell));
				inc++;
			}
		}
	}else if(yFrom==yTo){
		if(xFrom<xTo){
			// x++
			while(true){
				tmpCell = getCellFromXY(xTo+inc, yTo);
				if(tmpCell == null || _OBSTACLES[tmpCell]!=null || inc > maxInc) break;
				tmpContent = getCellContent(tmpCell);
				if(tmpContent == CELL_PLAYER) push(result, getLeekOnCell(tmpCell));
				inc++;
			}
		}else{
			// x--
			while(true){
				tmpCell = getCellFromXY(xTo-inc, yTo);
				if(tmpCell == null || _OBSTACLES[tmpCell]!=null || inc > maxInc) break;
				tmpContent = getCellContent(tmpCell);
				if(tmpContent == CELL_PLAYER) push(result, getLeekOnCell(tmpCell));
				inc++;
			}
		}
	}
	
	return @result;
}

// renvoie un array de cell depuis lesquel on peut tirer sur cell
// ne fonctionne que pour le leek qui l'utilise, j'utilise leekToIgnore = [getLeek()]
// pour les lignes de vue et _LEEKS pour les cases non accessibles (ou il y a tout le monde sauf le leek)
// donc pas pour les bulbes cette fonction !
function _getCellsToUseWeapChipOnCell(@weapChip, @cell){
	var leekToIgnore = [getLeek()],result = [],
	x = getCellX(cell), y = getCellY(cell),
	minrange = _ITEM_MINRANGE[weapChip],
	maxrange = _ITEM_MAXRANGE[weapChip],
	inline = _ITEM_INLINE[weapChip],
	needlos = _ITEM_NEEDLOS[weapChip];
	for(var x1 = x-maxrange; x1 <= x+maxrange; x1++){
		for(var y1 = y-maxrange; y1 <= y+maxrange; y1++){
			var fromCell = getCellFromXY(x1, y1);
			if(fromCell!=null 
			&& _OBSTACLES[fromCell]==null 
			&& _LEEKS_CELL[fromCell]==null){
				var dist = getCellDistance(fromCell,cell);
				if(dist >= minrange && dist <= maxrange
				&& (!needlos || lineOfSight(fromCell, cell, leekToIgnore))
				&& (!inline || isOnSameLine(fromCell,cell))){
					push(result, fromCell);
				}
			}
		}
	}
	return @result;
}

function _getCellToUseWeapChipOnCell(@weapChip, @cell){
	var leekToIgnore = [getLeek()],result, mpDist = 100,
	x = getCellX(cell), y = getCellY(cell), isWeap = isWeapon(weapChip),
	minrange = isWeap ? getWeaponMinRange(weapChip) : getChipMinRange(weapChip),
	maxrange = isWeap ? getWeaponMaxRange(weapChip) : getChipMaxRange(weapChip),
	inline = isWeap ? isInlineWeapon(weapChip) : isInlineChip(weapChip),
	needlos = isWeap ? weaponNeedLos(weapChip) : chipNeedLos(weapChip);
	for(var x1 = x-maxrange; x1 <= x+maxrange; x1++){
		for(var y1 = y-maxrange; y1 <= y+maxrange; y1++){
			var fromCell = getCellFromXY(x1, y1);
			if(fromCell!=null 
			&& _OBSTACLES[fromCell]==null 
			&& _LEEKS_CELL[fromCell]==null){
				var dist = getCellDistance(fromCell,cell);
				if(dist >= minrange && dist <= maxrange
				&& (!needlos || lineOfSight(fromCell, cell, leekToIgnore))
				&& (!inline || isOnSameLine(fromCell,cell))){
					if(_SELF_FULLMAP_PATH_DIST[fromCell]!=null && _SELF_FULLMAP_PATH_DIST[fromCell]<mpDist){
						mpDist=_SELF_FULLMAP_PATH_DIST[fromCell];
						result=fromCell;
					}
				}
			}
		}
	}
	return @result;
}
