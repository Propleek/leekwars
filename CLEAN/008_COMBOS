include('auto');

global _CACHE_CLOSEST_ITEM = [];
function getCellToUseItemWithTele(@enemy, @item){
	if(_CACHE_CLOSEST_ITEM[enemy][item]==null){
		var cell = _ITEM_ISWEAP[item]
						? getCellToUseWeaponOnCell(item, getCell(enemy))
						: getCellToUseChipOnCell(item, getCell(enemy));
		//simple_getNearCellToUseItemOnCell(item, getCell(enemy));
		_CACHE_CLOSEST_ITEM[enemy][item] = cell;
	}
	return _CACHE_CLOSEST_ITEM[enemy][item];
}

function findBestTeleMove(){var n="findBestTeleMove"; startBenchFunction(n);
	var maxDMG = (getTP()-_ITEM_COST[CHIP_TELEPORTATION]) * 12 * (getStrength()/100+1);
	var _BESTMOVE=null, _BESTSCORE=_MIN_INT, maxmp = getMP();
	for(var e in _ALIVE_ENEMIES_LEEKS) _CACHE_CLOSEST_ITEM[e] = [];
	if(_ENCODING_STUFF[CHIP_TELEPORTATION] && getCooldown(CHIP_TELEPORTATION)==0){
		var combos = getTeleportComboSet();
		for(var e in _ALIVE_ENEMIES_LEEKS){
			if(getLife(e) > maxDMG) continue;
			var eCell = getCell(e);
			// generation d'un move
			for(var combo in combos){
				// find items cell
				var cellzItemz = [];
				for(var item in combo){
					var cell = getCellToUseItemWithTele(e, item);
					cellzItemz[cell]=item;
				}
				//find tp cell
				var cellTP = null;
				for(var cell:var item in cellzItemz){
					cellTP = _getNearCellToUseItemOnCell(CHIP_TELEPORTATION, cell, reachableCells);
					break;
				}
				if(cellTP!=null){
					var score = 0, stack = [], deads = [],
						reach = [], from, actions = [], scores = [];
					
					var mpleft = maxmp-reachableCells[cellTP];
					var boolNoFirst = true; // ouais c'est moche ouais.
					for(var cell: var item in cellzItemz){
						if(boolNoFirst){
							boolNoFirst = false;
							push(actions, getBinFromAction_(cellTP, cell, CHIP_TELEPORTATION));
							push(scores, 0);
						}
						else mpleft-= reach[cell];
						if(mpleft<0){
							score = _MIN_INT;
							break;
						}
						from = cell;
						var action = getBinFromAction_(from, eCell, item);
						map_action_targets[action] = _ITEM_ISWEAP[item] 
							? getWeaponTargets(item, eCell) 
							: getChipTargets(item, eCell);
						push(actions, action);
						var scr = getScoreOfAction(action, stack, deads);
						push(scores, scr);
						score+= scr;
						reach = getReachableCells([cell:0], mpleft, [getCell()]);
					}
					// garde que les kills, sauf si j'ai l'avantage (1.5*+depv)
					if(count(deads)==0 && _STATE_RATIO_PV<1.5)continue;
					var final = getSafeScore(from, mpleft, deads, stack);
					score+= final[_score];
					if(_BESTMOVE==null || _BESTSCORE<score){
						if(count(deads)>0){
							_BESTMOVE = [
								_score:score,
								_actions:actions,
								_scores:scores,
								_sScore:final[_score],
								_sCell:final[_sCell],
								_danger:final[_danger],
								_mpused:final[_mpused],
								_tpleft:final[_tpleft],
								_stack:stack,//pour le debuging
								_dead:deads//pour le debuging
							];
							_BESTSCORE = score;
						}
					}
				}
			}
		}
	}
	stopBenchFunction(n); return @_BESTMOVE;
}


function findBestMove(@allComboz){
	// filtre les combos dont un item n'a pas le CD
	var allCombos = filterCooldownedCombos(allComboz);
	
	//raz du cache.
	_CACHE_SCORE_SAFECELL = [];
	_CACHE_SCORE_ACTION = [];
	var _OP_LIMIT = OPERATIONS_LIMIT*0.97;
	if(_IS_SUMMONER) _OP_LIMIT-= _OPERATION_BULB*(_LEEKS[_SELF][_nbBulbs]+1);
	var _BESTMOVE = _IS_TELEPORT ? findBestTeleMove() : null;
	var selfCell = getCell();
	var selfMP = getMP();
	var selfLife = getLife();
	var lifePercent = selfLife/getTotalLife();
	var cntCombo = count(allCombos);
	
	//var __DEBUG_STRINGINFO = "";
	
	for(var combo in allCombos){
		var canAlterDanger = false;
		for(var item in combo) if(_ITEM_CAN_ALTER_DANGER[item]) {canAlterDanger=true; break;}
		cntCombo--;
		var fromArray = [];
		// find cells where every part of combo can be done.
		if(count(combo)==0){ // special case empty combo for safe play.
			push(fromArray, getCell());
		}else{	
			for(var c:var d in reachableCells){
				if(_OBSTACLES[c]!=null) continue;
				var ok = true, isOnlySelf = true;
				for(var item in combo){
					if(map_from_item_actions[c][item]==null){
						if(self_action_array[item]==null){
							ok = false;
							break;
						}
					}else{
						isOnlySelf = false;
					}
				}
				if(ok){
					if(isOnlySelf){ if(c==selfCell) { push(fromArray, c); }
					}else{ push(fromArray, c); }
				}
			}
		}
		// DEBUG
		//for(var item in combo) __DEBUG_STRINGINFO += "-" + _ITEMID_TOSTRING[item];
		//__DEBUG_STRINGINFO += ": " + count(fromArray) + "\n";
		// END DEBUG
		for(var aCell in fromArray){
			var mpMove1 = reachableCells[aCell];
			var mpLeft = selfMP - mpMove1;
			if(mpMove1 != null && mpLeft >= 0){
				var score = 0, tmpScore = 0, best = [], scores = [], total;
				var stack = [], dead = [];
				// calcul du score de la meilleure combo depuis cette case.
				for(var item in combo){
					// meilleure score pour chaque item
					var actions = @map_from_item_actions[aCell][item];
					var aScore = 0, aBest, aStack, aDead;
					if(actions!=null){
						for(var action in actions){
							var tmpstack=stack, tmpdead=dead;
							tmpScore=getScoreOfAction(action, tmpstack, tmpdead);
							if(aBest == null || aScore < tmpScore){
								aScore = tmpScore;
								aBest = action;
								aStack = tmpstack;
								aDead = tmpdead;
							}
						}
					}//si actions est null, alors self_action ne peut pas être null.
					if(self_action_array[item]!=null){
						var tmpstack=stack, tmpdead=dead;
						//creation d'une action self sur cette case.
						var action= map_from_item_actions[_action_SELFCELL][item][0];
						tmpScore=getScoreOfAction(action, tmpstack, tmpdead);
						if(aBest == null || aScore < tmpScore){
							aScore = tmpScore;
							aBest = action;
							aStack = tmpstack;
							aDead = tmpdead;
						}
					}
					if(aBest != null && aScore>0){
						push(best, aBest);
						push(scores, aScore);
						stack = aStack;
						dead = aDead;
						score += aScore;
					}else{
						//l'action n'a pas été push car inutile, les TP restant sont libre pour lancer un buff
						//mayeb faire autrement, je laisse le commentaire ici.
					}
				}
				// si je me suis boost les mp, on les prend en compte pour la suite
				if(stack[_SELF][_mp]!=null) mpLeft+=round(stack[_SELF][_mp]);
				// à partir du score de la meilleure combo depuis aCell, recherche de la meilleure case safe.
				
				var bestSafeMove = getBestSafeCellScore(canAlterDanger, aCell, dead, stack, selfLife, lifePercent, mpLeft, selfCell);
				var finalScore = score + bestSafeMove[_score]; // cumul des actions

				if(_BESTMOVE==null || _BESTMOVE[_score]<finalScore) _BESTMOVE = [
					_score:finalScore,
					_actions:best,
					_scores:scores,
					_sScore:bestSafeMove[_score],
					_sCell:bestSafeMove[_sCell],
					_danger:bestSafeMove[_danger],
					_mpused: bestSafeMove[_mpused],
					_tpleft: bestSafeMove[_tpleft],
					_stack:stack,//pour le debuging
					_dead:dead//pour le debuging
				];
				if(getOperations()>_OP_LIMIT){
					debugE("Turn"+getTurn()+" breaked ! Combos left: "+ cntCombo +"/"+count(allCombos));
					// DEBUG
					//debug(__DEBUG_STRINGINFO);
					// END DEBUG
					return @_BESTMOVE;
				}
			}
		}
	}
	// DEBUG
	//debug(__DEBUG_STRINGINFO);
	// END DEBUG
	return @_BESTMOVE;
}

///////////////////////////////////////////
///////////////////////////////////////////
//				NEW STUFF
///////////////////////////////////////////
///////////////////////////////////////////

function generateRandomMoves(){ var n="generateRandomMoves"; startBenchFunction(n);
	var _BESTMOVE, fromCell = getCell(), totalMp = getMP(), totalTp = getTP(), nbTry = 0;
	
	while(nbTry++>-1){
		var move = [], score = 0, stack = [], dead = [], inCd = [];
		var action, from = fromCell, mp = totalMp, tp = totalTp;
		while(true){
			action = tryAddAction(from, mp, tp, inCd, dead);
			if(action!=null){
				score += getScoreOfAction(action, stack, dead);
				push(move, action); // getBinFromAction(action)
			} else break;
		}
		var final = getSafeScore(from, mp, dead, stack);
		score+= final[_score];
		
		if(_BESTMOVE==null || _BESTMOVE[_score]<score) _BESTMOVE = [
			_score:		score
			,_actions:	@move
			,_sCell:	final[_sCell]
			,_mpused: 	final[_mpused]
			,_danger:	final[_danger]
			//,_stack:null
			//,_dead:null
		];
		if(getOperations()>OPERATIONS_LIMIT*0.95){
			debugE("Nombre de move: " + nbTry);
			break;
		}
	}
	stopBenchFunction(n); return @_BESTMOVE;
}

function tryAddAction(@from, @mp, @tp, @inCd, @dead){ var n="tryAddAction"; startBenchFunction(n);
	var reachable = getCachedReachableCells(from, mp, dead);
	var size = 0, randArray = [];
	for(var cell:var dist in reachable){
		if(dist>mp)break;
		for(var item in map_fromC_items[cell]){
			if(_ITEM_COST[item]>tp) break;
			else if(inCd[item]==null){
				for(var action in map_from_item_actions[cell][item]){
					randArray[size++] = action;
				}
			}
		}
	}
	// action où je me cible moi même
	for(var item in map_fromC_items[_action_SELFCELL]){
		if(_ITEM_COST[item]>tp) break;
		else if(inCd[item]==null){
			for(var action in map_from_item_actions[_action_SELFCELL][item]){
				randArray[size++] = action;
			}
		}
	}
	
	if(size > 0){
		var action = randArray[randInt(0, size)];
		var item = action[_item], cell = action[_from];
		//gestion autocast
		if(cell==_action_SELFCELL){
			action[_from] = from;
			action[_to] = from;
		}else{
			mp = mp - reachable[cell];
		}
		tp = tp - _ITEM_COST[item];
		if(_ITEM_HAVECD[item]) inCd[item]=item;
		stopBenchFunction(n); return @action;
	} else return null;
}
