include('auto');
///////////////////////////////////////////
// Fichier de fonction internes
///////////////////////////////////////////

// ========================
// Fonctions pour l'init exclusivement
// ========================

// remplacement de substring qui est bugged
function mySubString(@str, @start, @len){
	var final = "", i = start;
	while(charAt(str, i)!=null && i < start+len){
		final+=charAt(str, i);
		i++;
	}
	return final;
}

function getItemName(@item){
	return @(getWeaponName(item)+getChipName(item));
}

// génère un id unique pour une cell et un array d'id, sous la forme d'un int
// on suppose 612 cases (10bit) + des id inférieur à 32 (5bit) et pas plus de 4 morts pour 30bits max.
function getUniqIdCellDead(@cell, @dead){
	var uniqId = cell;
	for(var key:var d in dead) uniqId |= dead << (10 + 5*key);
	return @uniqId;
}

// return un id unique pour une weap/chip & un array d'idleek peu importe l'ordre.
// ainsi que la case cible pour les armes à aoe (mettre null sinon pour les lazer !)
function getUniqueID_safeCell(@cell, @ids, @stack){
	sort(ids);
	return @(""+cell+ids+stack);
}

// return reachable cell as an array of [cell:dist]
// cells must be in form : [cell:dist]
// TODO probablement des optis à faire pour les ignoreCells
function getReachableCells(@cells, mp, @ignoreCells){
	var stack = cells;
	var tmp = cells;
	var next = [];
	while(mp-->0){
		for(var currentWorkingCell : var dist in tmp){
			for(var c in @_areaCells1[currentWorkingCell]){
				if(stack[c] == null && (isEmptyCell(c) || inArray(ignoreCells, c))){
					stack[c] = dist+1;
					next[c] = dist+1;
				}
			}
		}
		tmp = @next;
		next = [];
	}
	return @stack;
}

// return une version en cache des cases accessibles, et rajoute les mp manquants si besoin.
// ATTENTION : le tableau retourné par cette fonction peut inclure des mp au delà de @mp
// penser à check les mp dans le code avec un for(var c:var dist in reach) if(dist>mp)break;
function getCachedReachableCells(@fromCell, @mp, @dead){
	var uniqId = getUniqIdCellDead(fromCell, dead);
	var result = @_CACHE_REACHABLE_DANGER[uniqId];
	if(result==null){
		var ignored = [getCell()];for(var d in dead) push(ignored, getCell(d));
		result = getReachableCells([fromCell:0], mp, ignored);
		_CACHE_REACHABLE_SIZE[uniqId] = mp;
		_CACHE_REACHABLE_DANGER[uniqId] = @result;
	}else if(_CACHE_REACHABLE_SIZE[uniqId] < mp){
		var ignored = [getCell()];for(var d in dead) push(ignored, getCell(d));
		result = getReachableCells(_CACHE_REACHABLE_DANGER[uniqId], mp-_CACHE_REACHABLE_SIZE[uniqId], ignored);
		_CACHE_REACHABLE_SIZE[uniqId] = mp;
		_CACHE_REACHABLE_DANGER[uniqId] = @result;
	}
	return @result;
}

function getNearestEnemyLeek(){
	var leek, dist, selfCell = getCell();
	for(var e in _ALIVE_ENEMIES_LEEKS){
		var tmp = getCellDistance(selfCell, getCell(e));
		if(leek==null || tmp<dist){
			leek = e;
			dist = tmp;
		}
	}
	return leek;
}

// return an array of cell according to AREA_CIRCLE_X, ordered from closest to farest.
function prepareCellArea(@c, @obstacle){
    if(_OBSTACLES[c]!=null) return null; // c'est un obstacle, pas besoin de préparer
    var x = getCellX(c), y = getCellY(c), result = [];
    // AREA_CIRCLE_1
    var cell = getCellFromXY(x, y-1);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
    cell = getCellFromXY(x, y+1);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
    cell = getCellFromXY(x-1, y);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
    cell = getCellFromXY(x+1, y);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
	
    return @result;
}

function prepareCellArea2(@c, @obstacle){
    if(_OBSTACLES[c]!=null) return null; // c'est un obstacle, pas besoin de préparer
    var x = getCellX(c), y = getCellY(c), result = [];
    // AREA_CIRCLE_1
    var cell = getCellFromXY(x, y-2);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
    cell = getCellFromXY(x, y+2);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
    cell = getCellFromXY(x-2, y);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
    cell = getCellFromXY(x+2, y);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
	
	cell = getCellFromXY(x+1, y+1);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
    cell = getCellFromXY(x-1, y+1);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
    cell = getCellFromXY(x+1, y-1);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
	cell = getCellFromXY(x-1, y-1);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
	
    return @result;
}

function prepareCellArea3(@c, @obstacle){
    if(_OBSTACLES[c]!=null) return null; // c'est un obstacle, pas besoin de préparer
    var x = getCellX(c), y = getCellY(c), result = [];
    // AREA_CIRCLE_1
    var cell = getCellFromXY(x, y-3);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
    cell = getCellFromXY(x, y+3);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
    cell = getCellFromXY(x-3, y);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
    cell = getCellFromXY(x+3, y);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
	
	cell = getCellFromXY(x+2, y+1);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
    cell = getCellFromXY(x+2, y-1);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
    cell = getCellFromXY(x+1, y+2);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
	cell = getCellFromXY(x+1, y-2);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
	cell = getCellFromXY(x-1, y+2);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
    cell = getCellFromXY(x-1, y-2);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
    cell = getCellFromXY(x-2, y+1);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
	cell = getCellFromXY(x-2, y-1);
    if(cell!=null && (_OBSTACLES[cell]==null || obstacle)) push(result, cell);
	
    return @result;
}

// retourne un tableau de cells à partir d'un tableau de leeks
function getCellsFromLeeks(@leeks){
	var cells = [];
	for(var l in leeks) push(cells, getCell(l));
	return @cells;
}

// retourne le type de l'entity
function getEntityType(@entity){
	if(!isSummon(entity)) return ENTITY_LEEK_;
	else{
		var name = getName(entity);
		return	 name == "metallic_bulb"	? ENTITY_METALLIC_BULB :
				(name == "healer_bulb"		? ENTITY_HEALER_BULB :
				(name == "lightning_bulb"	? ENTITY_LIGHTNING_BULB :
				(name == "fire_bulb"		? ENTITY_FIRE_BULB :
				(name == "iced_bulb"		? ENTITY_ICED_BULB :
				(name == "rocky_bulb"		? ENTITY_ROCKY_BULB : 
											  ENTITY_PUNY_BULB)))));
	}
}

//////////////////////////
// OPTI BINAIRE
//////////////////////////

function convertCombosToBinaries(@combos){
	var result = [];
	for(var combo in combos){
		push(result, getBinFromCombo(combo));
	}
	return @result;
}

function convertBinariesToCombos(@binaries){
	var result = [];
	for(var binary in binaries){
		push(result, getComboFromBin(binary));
	}
	return @result;
}

function getComboFromBin(@binary){
	var combo = [];
	var cnt = binary & _MASK_0_3;	
	for(var i = 0; i < cnt; i++){
		var key = (binary & createMask(4+i*4, 7+i*4)) >> (4+i*4);
		var item = _DECODING_STUFF[key];
		push(combo, item);
	}
	return @combo;
}

function getBinFromCombo(@combo){
	if(count(combo)>7) debugE("TROP D'ITEM DANS LA COMBO POUR EN FAIRE UN BINARY");
	var id = 0;
	id |= _MASK_0_3 & count(combo);
	for(var i = 0; i < count(combo); i++){
		id |= (_ENCODING_STUFF[combo[i]] << (4+4*i));
	}
	return @id;
}

function getActionFromBin(@binary){
	var action = [];
	action[_item] = _DECODING_STUFF[(binary & _MASK_0_3)];
	action[_from] = (binary & _MASK_4_13) >> 4;
	action[_to] = (binary & _MASK_14_23) >> 14;
	return @action;
}

function getBinFromAction(@action){
	var id = 0;
	id |= _MASK_0_3 & _ENCODING_STUFF[action[_item]];
	id |= (action[_from] << 4);
	id |= (action[_to] << 14);
	return @id;
}

function getActionFromBin_(@binary, @from, @to, @item){
	item = _DECODING_STUFF[(binary & _MASK_0_3)];
	from = (binary & _MASK_4_13) >> 4;
	to = (binary & _MASK_14_23) >> 14;
}

function getBinFromAction_(@from, @to, @item){
	var id = 0;
	id |= _MASK_0_3 & _ENCODING_STUFF[item];
	id |= (from << 4);
	id |= (to << 14);
	return @id;
}

global _MASK_0_3 = createMask(0, 3);
global _MASK_4_13 = createMask(4, 13);
global _MASK_14_23 = createMask(14, 23);
function createMask(@a, @b){
   var r = 0;
   for(var i=a; i<=b; i++) r |= 1 << i;
   return @r;
}

function displayBinary(integer){
	var str = "", groupSize = 8;
    for(var i = 31; i >= 0 ; i--) {
		var mask = 1 << i;
		str += (integer & mask) != 0 ? "1" : "0";
		if (i % groupSize == 0) str += " ";
	}
	debug(integer+": "+str);
}

//////////////////////////
// REGISTRE
//////////////////////////

function getFullRegister(@key){
	var cnt = 0, reg, str = "";
	do{
		reg = getRegister(key+___+cnt);
		if(reg!=null) str+=reg;
		cnt++;
	}while(reg != null);
	return @str;
}

function setFullRegister(@key, @value){
	var blocksize = 4999;
	var len = length(value);
	var cnt = 0;
	var start=0;
	while(start<len){
		var cle = key+___+cnt;
		var size=len-start;
		if(size > blocksize) size = blocksize;
		var substr = substring(value, start, size);//mySubString(value, start, size);
		var val = setRegister(cle, substr);
		if(val) debug(key+" OK"); 
		else debugE(key+" NOK");
		cnt++;
		start = cnt*blocksize;
	}
}

function clearAllRegisters(){
	for(var reg:var val in getRegisters()){
		deleteRegister(reg);
	}
}

//////////////////////////
// DEBUG
//////////////////////////
function debugColor(message, color){
	if(__DEBUG_ON) debugW("|||{"+color+"}"+message);
}
// mesure d'opération simple
function startOp(){
	__debug_operation = getOperations();
}
function stopOp(@title){
	if(__DEBUG_ON) debug(title + ": " + (getOperations()-__debug_operation-6-2-length(title)));	
}
function stopOpk(@title){
	if(__DEBUG_ON) debug(title + ": " + round((getOperations()-__debug_operation)/1000) + "k");
}
function stopOpkW(@title){
	if(__DEBUG_ON) debugW(title + ": " + round((getOperations()-__debug_operation)/1000) + "k");
}
// mesure de consommation d'opération moyenne d'une fonction
function resetBench(){
	__count_func = [];
	__cumul_func = [];
	__laststart_func = [];
}
function startBenchFunction(name){
	if(__count_func[name]==null) __count_func[name]=0;
	if(__cumul_func[name]==null) __cumul_func[name]=0;
	__laststart_func[name] = getOperations();
}
function stopBenchFunction(name){
	__count_func[name]++;
	__cumul_func[name]+= getOperations()-__laststart_func[name];
}
function displayBench(){
	for(var name:var nbCall in __count_func){
		debugColor("Turn"+ getTurn() + " "+ name + ": " + nbCall + " call. Moy= " + round(__cumul_func[name]/nbCall) + " Total= " + round((__cumul_func[name])/1000) + "k", "blue");
	}
}

function colorMap(){
	var max=getLife();
	var white = getColor(255, 255, 255);
	for(var cell: var dmg in map_danger){
		if(dmg>=max) mark(cell, white);
		else mark(cell, getColor(dmg/max*255, 255-(dmg/max*255), 0));
	}
}
